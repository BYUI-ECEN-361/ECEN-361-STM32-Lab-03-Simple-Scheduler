
ECEN-361-STM32-Lab-03-Simple-Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  080053c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  080053c0  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010582  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230d  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3c  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279f9  00000000  00000000  000345a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e45  00000000  00000000  0005bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4749  00000000  00000000  0006dde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004960  00000000  00000000  0016252c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00166e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005278 	.word	0x08005278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005278 	.word	0x08005278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f933 	bl	8001808 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f922 	bl	8001808 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f917 	bl	8001808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f911 	bl	8001808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f90b 	bl	8001808 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	value = (value & 0b1111) % 10 ;
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	f003 020f 	and.w	r2, r3, #15
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MultiFunctionShield_Single_Digit_Display+0x90>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	1099      	asrs	r1, r3, #2
 8000622:	17d3      	asrs	r3, r2, #31
 8000624:	1ac9      	subs	r1, r1, r3
 8000626:	460b      	mov	r3, r1
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1ad1      	subs	r1, r2, r3
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	if ((digit <=4 ) && (digit >=0))
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b04      	cmp	r3, #4
 8000638:	dc1a      	bgt.n	8000670 <MultiFunctionShield_Single_Digit_Display+0x68>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db17      	blt.n	8000670 <MultiFunctionShield_Single_Digit_Display+0x68>
		SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000640:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MultiFunctionShield_Single_Digit_Display+0x90>)
 8000646:	fb83 1302 	smull	r1, r3, r3, r2
 800064a:	1099      	asrs	r1, r3, #2
 800064c:	17d3      	asrs	r3, r2, #31
 800064e:	1ac9      	subs	r1, r1, r3
 8000650:	460b      	mov	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	b25b      	sxtb	r3, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1c3 0304 	rsb	r3, r3, #4
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <MultiFunctionShield_Single_Digit_Display+0x94>)
 8000668:	5c51      	ldrb	r1, [r2, r1]
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 800066c:	54d1      	strb	r1, [r2, r3]
 800066e:	e00c      	b.n	800068a <MultiFunctionShield_Single_Digit_Display+0x82>
	else
	{
		SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000670:	22bf      	movs	r2, #191	; 0xbf
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000674:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000676:	22bf      	movs	r2, #191	; 0xbf
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 800067a:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MINUS;
 800067c:	22bf      	movs	r2, #191	; 0xbf
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000680:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000682:	22bf      	movs	r2, #191	; 0xbf
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000686:	70da      	strb	r2, [r3, #3]
		}
	}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	66666667 	.word	0x66666667
 800069c:	080052bc 	.word	0x080052bc
 80006a0:	20000088 	.word	0x20000088

080006a4 <MultiFunctionShield_Clear>:
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
}

void MultiFunctionShield_Clear(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006ac:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006b2:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006b8:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006be:	70da      	strb	r2, [r3, #3]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000088 	.word	0x20000088

080006d0 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2120      	movs	r1, #32
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006e0:	f001 f892 	bl	8001808 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006e4:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f7ff ff33 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000706:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f7ff ff23 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 800072c:	f001 f86c 	bl	8001808 <HAL_GPIO_WritePin>
	}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000400 	.word	0x48000400
 800073c:	20000088 	.word	0x20000088
 8000740:	080052c8 	.word	0x080052c8

08000744 <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 8000754:	4611      	mov	r1, r2
 8000756:	7019      	strb	r1, [r3, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	3b01      	subs	r3, #1
 800075c:	2b03      	cmp	r3, #3
 800075e:	d81e      	bhi.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
 8000760:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <MultiFunctionShield__ISRFunc+0x24>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	08000779 	.word	0x08000779
 800076c:	08000781 	.word	0x08000781
 8000770:	08000789 	.word	0x08000789
 8000774:	08000791 	.word	0x08000791
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffa9 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 800077e:	e00e      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ffa5 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 8000786:	e00a      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff ffa1 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 800078e:	e006      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff9d 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	bf00      	nop
  }
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <Scheduler_Init>:
taskControlBlock list_of_tasks_to_do[MAXTASKS];


/**  declarations */
void Scheduler_Init()
	{ last_runtime = uwTick; }
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <Scheduler_Init+0x18>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <Scheduler_Init+0x1c>)
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	2000008c 	.word	0x2000008c

080007c8 <Scheduler_StartTask>:
	}

/* Function to add tasks to the queue */

void Scheduler_StartTask(int period, task_cb task)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (num_tasks < MAXTASKS)
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Scheduler_StartTask+0x68>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	dc23      	bgt.n	8000822 <Scheduler_StartTask+0x5a>
    {
        list_of_tasks_to_do[num_tasks].period = period;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <Scheduler_StartTask+0x68>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <Scheduler_StartTask+0x6c>)
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4413      	add	r3, r2
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
        list_of_tasks_to_do[num_tasks].remaining_time = 0;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <Scheduler_StartTask+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a11      	ldr	r2, [pc, #68]	; (8000834 <Scheduler_StartTask+0x6c>)
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	4413      	add	r3, r2
 80007f2:	3304      	adds	r3, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
        list_of_tasks_to_do[num_tasks].suspended = false;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <Scheduler_StartTask+0x68>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <Scheduler_StartTask+0x6c>)
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	4413      	add	r3, r2
 8000802:	3308      	adds	r3, #8
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
        list_of_tasks_to_do[num_tasks].callback = task;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Scheduler_StartTask+0x68>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <Scheduler_StartTask+0x6c>)
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	330c      	adds	r3, #12
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	601a      	str	r2, [r3, #0]
        num_tasks++;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <Scheduler_StartTask+0x68>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <Scheduler_StartTask+0x68>)
 8000820:	6013      	str	r3, [r2, #0]
    }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090
 8000834:	20000098 	.word	0x20000098

08000838 <D1_task>:


/*************** HERE ARE THE SEPARATE TASKS!   *******************/

void D1_task()
    { TASK_D1_LED_TOGGLE
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fff9 	bl	8001838 <HAL_GPIO_TogglePin>
		MultiFunctionShield_Single_Digit_Display(4,Task_D1_Count++);
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <D1_task+0x30>)
 8000848:	f9b3 2000 	ldrsh.w	r2, [r3]
 800084c:	b293      	uxth	r3, r2
 800084e:	3301      	adds	r3, #1
 8000850:	b29b      	uxth	r3, r3
 8000852:	b219      	sxth	r1, r3
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <D1_task+0x30>)
 8000856:	8019      	strh	r1, [r3, #0]
 8000858:	b253      	sxtb	r3, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2004      	movs	r0, #4
 800085e:	f7ff fed3 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>


    }
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094

0800086c <D4_task>:

void D4_task()
    { TASK_D4_LED_TOGGLE
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <D4_task+0x2c>)
 8000874:	f000 ffe0 	bl	8001838 <HAL_GPIO_TogglePin>
		MultiFunctionShield_Single_Digit_Display(1,Task_D4_Count++);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <D4_task+0x30>)
 800087a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800087e:	b293      	uxth	r3, r2
 8000880:	3301      	adds	r3, #1
 8000882:	b29b      	uxth	r3, r3
 8000884:	b219      	sxth	r1, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <D4_task+0x30>)
 8000888:	8019      	strh	r1, [r3, #0]
 800088a:	b253      	sxtb	r3, r2
 800088c:	4619      	mov	r1, r3
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff feba 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	  }
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	48000400 	.word	0x48000400
 800089c:	20000096 	.word	0x20000096

080008a0 <Scheduler_Dispatch>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/******************************** STUDENT EDITABLE HERE STARTS HERE ***********************/
  void Scheduler_Dispatch()
      {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
      /* uWTick is updated each SysTick*/
      uint32_t runTime = uwTick - last_runtime;     /* Save how long this slice has been going */
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <Scheduler_Dispatch+0x2c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <Scheduler_Dispatch+0x30>)
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	1a9b      	subs	r3, r3, r2
 80008b0:	607b      	str	r3, [r7, #4]
      last_runtime = uwTick;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <Scheduler_Dispatch+0x2c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <Scheduler_Dispatch+0x30>)
 80008ba:	601a      	str	r2, [r3, #0]
      task_cb task = NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
       * Note that you should also look at the 'suspended' piece of information
       * in the task_control block to see if the scheduler needs to skip the task for now
       */
  /******************************** STUDENT EDITABLE ENDS HERE ***********************/

         task();	// The task is called!
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	4798      	blx	r3
         return;
 80008c4:	bf00      	nop
         }
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001fc 	.word	0x200001fc
 80008d0:	2000008c 	.word	0x2000008c

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fc3a 	bl	8001150 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f84a 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f944 	bl	8000b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 f912 	bl	8000b0c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80008e8:	f000 f8ea 	bl	8000ac0 <MX_TIM17_Init>
  MX_TIM1_Init();
 80008ec:	f000 f894 	bl	8000a18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);  // LED SevenSeg cycle thru them
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <main+0x88>)
 80008f2:	f002 fb4b 	bl	8002f8c <HAL_TIM_Base_Start_IT>
  // Clear the Seven-Segments
  MultiFunctionShield_Clear();
 80008f6:	f7ff fed5 	bl	80006a4 <MultiFunctionShield_Clear>


  // Clear the lights
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2120      	movs	r1, #32
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 ff81 	bl	8001808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 ff7b 	bl	8001808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 ff75 	bl	8001808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <main+0x8c>)
 8000924:	f000 ff70 	bl	8001808 <HAL_GPIO_WritePin>
	//MultiFunctionShield_Display(10000);  // Out of range  will display "----"
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\033\143\n");  // clear the terminal before printing
 8000928:	480e      	ldr	r0, [pc, #56]	; (8000964 <main+0x90>)
 800092a:	f003 fe3b 	bl	80045a4 <puts>
  printf("Starting Lab-03:  Write a scheduler\n\r\n\r");  // clear the terminal before printing
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <main+0x94>)
 8000930:	f003 fdd2 	bl	80044d8 <iprintf>
  HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f000 fc86 	bl	8001248 <HAL_Delay>

	Scheduler_Init();
 800093c:	f7ff ff34 	bl	80007a8 <Scheduler_Init>
	// Start task arguments are:
	//      start offset in ms, period in ms, function callback
	Scheduler_StartTask(700, D1_task);
 8000940:	490a      	ldr	r1, [pc, #40]	; (800096c <main+0x98>)
 8000942:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000946:	f7ff ff3f 	bl	80007c8 <Scheduler_StartTask>
	Scheduler_StartTask(1500, D4_task);
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <main+0x9c>)
 800094c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000950:	f7ff ff3a 	bl	80007c8 <Scheduler_StartTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Scheduler_Dispatch();
 8000954:	f7ff ffa4 	bl	80008a0 <Scheduler_Dispatch>
 8000958:	e7fc      	b.n	8000954 <main+0x80>
 800095a:	bf00      	nop
 800095c:	20000124 	.word	0x20000124
 8000960:	48000400 	.word	0x48000400
 8000964:	08005290 	.word	0x08005290
 8000968:	08005294 	.word	0x08005294
 800096c:	08000839 	.word	0x08000839
 8000970:	0800086d 	.word	0x0800086d

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b096      	sub	sp, #88	; 0x58
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2244      	movs	r2, #68	; 0x44
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 feee 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000996:	f44f 7000 	mov.w	r0, #512	; 0x200
 800099a:	f000 ff8d 	bl	80018b8 <HAL_PWREx_ControlVoltageScaling>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a4:	f000 f9ea 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b2:	2310      	movs	r3, #16
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ba:	2302      	movs	r3, #2
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009c2:	230a      	movs	r3, #10
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c6:	2307      	movs	r3, #7
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 ffc4 	bl	8001964 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009e2:	f000 f9cb 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2303      	movs	r3, #3
 80009ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fb8c 	bl	800211c <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a0a:	f000 f9b7 	bl	8000d7c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <MX_TIM1_Init+0xa4>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a3e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a66:	f002 fa39 	bl	8002edc <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 f984 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000a82:	f002 fbf5 	bl	8003270 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a8c:	f000 f976 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_TIM1_Init+0xa0>)
 8000aa2:	f002 fe0b 	bl	80036bc <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000aac:	f000 f966 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	40012c00 	.word	0x40012c00

08000ac0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <MX_TIM17_Init+0x48>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000acc:	f240 321f 	movw	r2, #799	; 0x31f
 8000ad0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000ada:	2264      	movs	r2, #100	; 0x64
 8000adc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_TIM17_Init+0x44>)
 8000af2:	f002 f9f3 	bl	8002edc <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000afc:	f000 f93e 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000124 	.word	0x20000124
 8000b08:	40014800 	.word	0x40014800

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b50:	f002 fe5a 	bl	8003808 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f90f 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000170 	.word	0x20000170
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a5b      	ldr	r2, [pc, #364]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <MX_GPIO_Init+0x188>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f000 fe0c 	bl	8001808 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2160      	movs	r1, #96	; 0x60
 8000bf4:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x18c>)
 8000bf6:	f000 fe07 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	483a      	ldr	r0, [pc, #232]	; (8000cfc <MX_GPIO_Init+0x190>)
 8000c12:	f000 fc4f 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4834      	ldr	r0, [pc, #208]	; (8000cfc <MX_GPIO_Init+0x190>)
 8000c2a:	f000 fc43 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c32:	230b      	movs	r3, #11
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 fc36 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 fc28 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000c64:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000c68:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fc18 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0x18c>)
 8000c9a:	f000 fc0b 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8000c9e:	2360      	movs	r3, #96	; 0x60
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <MX_GPIO_Init+0x18c>)
 8000cb6:	f000 fbfd 	bl	80014b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2006      	movs	r0, #6
 8000cc0:	f000 fbc1 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cc4:	2006      	movs	r0, #6
 8000cc6:	f000 fbda 	bl	800147e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fbb9 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cd4:	2007      	movs	r0, #7
 8000cd6:	f000 fbd2 	bl	800147e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 fbb1 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f000 fbca 	bl	800147e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800

08000d00 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d08:	1d39      	adds	r1, r7, #4
 8000d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <__io_putchar+0x20>)
 8000d12:	f002 fdc7 	bl	80038a4 <HAL_UART_Transmit>

  return ch;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000170 	.word	0x20000170

08000d24 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
  /************** STUDENT EDITABLE HERE STARTS HERE *****/
	switch(GPIO_Pin)
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_EXTI_Callback+0x20>
 8000d34:	2b10      	cmp	r3, #16
 8000d36:	dc03      	bgt.n	8000d40 <HAL_GPIO_EXTI_Callback+0x1c>
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d005      	beq.n	8000d48 <HAL_GPIO_EXTI_Callback+0x24>
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_EXTI_Callback+0x28>
	case Button_2_Pin:
		break;
	case Button_3_Pin:
		break;
	default:
      __NOP();
 8000d40:	bf00      	nop
	}
  /************** STUDENT EDITABLE HERE ENDS HERE *****/
}
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_EXTI_Callback+0x2a>
		break;
 8000d44:	bf00      	nop
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_EXTI_Callback+0x2a>
		break;
 8000d48:	bf00      	nop
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_EXTI_Callback+0x2a>
		break;
 8000d4c:	bf00      	nop
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED

  if (htim == &htim17 )
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x14>
	  {
		  MultiFunctionShield__ISRFunc();
 8000d6c:	f7ff fcea 	bl	8000744 <MultiFunctionShield__ISRFunc>
	  }

	}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000124 	.word	0x20000124

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	; 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_TIM_Base_MspInit+0x68>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d114      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2018      	movs	r0, #24
 8000e00:	f000 fb21 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e04:	2018      	movs	r0, #24
 8000e06:	f000 fb3a 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e0a:	e010      	b.n	8000e2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_TIM_Base_MspInit+0x70>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10b      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6613      	str	r3, [r2, #96]	; 0x60
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40014800 	.word	0x40014800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ac      	sub	sp, #176	; 0xb0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2288      	movs	r2, #136	; 0x88
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc7d 	bl	8004764 <memset>
  if(huart->Instance==USART2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <HAL_UART_MspInit+0xb0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d13b      	bne.n	8000eec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fb6f 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e8c:	f7ff ff76 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f000 fae4 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	37b0      	adds	r7, #176	; 0xb0
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40021000 	.word	0x40021000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f95e 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

	/*  THIS launches the students scheduler */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fc89 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8000f62:	2002      	movs	r0, #2
 8000f64:	f000 fc82 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f000 fc7b 	bl	800186c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f82:	f002 f873 	bl	800306c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000d8 	.word	0x200000d8

08000f90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa2:	f3af 8000 	nop.w
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf0      	blt.n	8000fa2 <_read+0x12>
  }

  return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e009      	b.n	8000ff0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8b 	bl	8000d00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf1      	blt.n	8000fdc <_write+0x12>
  }
  return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_close>:

int _close(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	605a      	str	r2, [r3, #4]
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_isatty>:

int _isatty(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f003 fbb0 	bl	8004800 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20018000 	.word	0x20018000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	20000350 	.word	0x20000350

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ffea 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <LoopForever+0x6>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LoopForever+0xe>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <LoopForever+0x16>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f003 fb6f 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112e:	f7ff fbd1 	bl	80008d4 <main>

08001132 <LoopForever>:

LoopForever:
    b LoopForever
 8001132:	e7fe      	b.n	8001132 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001140:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8001144:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001148:	2000034c 	.word	0x2000034c

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>
	...

08001150 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_Init+0x3c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_Init+0x3c>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	2003      	movs	r0, #3
 8001168:	f000 f962 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f80f 	bl	8001190 <HAL_InitTick>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	e001      	b.n	8001182 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117e:	f7ff fe03 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001182:	79fb      	ldrb	r3, [r7, #7]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40022000 	.word	0x40022000

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_InitTick+0x6c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d023      	beq.n	80011ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_InitTick+0x70>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f96d 	bl	800149a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d809      	bhi.n	80011e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f937 	bl	8001446 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_InitTick+0x74>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e007      	b.n	80011f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e004      	b.n	80011f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e001      	b.n	80011f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	200001fc 	.word	0x200001fc

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	e17f      	b.n	80017c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8171 	beq.w	80017be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <HAL_GPIO_Init+0x40>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d130      	bne.n	8001556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152a:	2201      	movs	r2, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 0201 	and.w	r2, r3, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b03      	cmp	r3, #3
 8001560:	d118      	bne.n	8001594 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80ac 	beq.w	80017be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_GPIO_Init+0x330>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6613      	str	r3, [r2, #96]	; 0x60
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_GPIO_Init+0x330>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167e:	4a5a      	ldr	r2, [pc, #360]	; (80017e8 <HAL_GPIO_Init+0x334>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x242>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_GPIO_Init+0x338>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x23e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_GPIO_Init+0x33c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x23a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x340>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x236>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_GPIO_Init+0x344>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x232>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_GPIO_Init+0x348>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x22e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_GPIO_Init+0x34c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x22a>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00c      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016de:	2307      	movs	r3, #7
 80016e0:	e00a      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e008      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016f6:	2300      	movs	r3, #0
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4093      	lsls	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001708:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x334>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x350>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_GPIO_Init+0x350>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_GPIO_Init+0x350>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <HAL_GPIO_Init+0x350>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_GPIO_Init+0x350>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_GPIO_Init+0x350>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_GPIO_Init+0x350>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_GPIO_Init+0x350>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f ae78 	bne.w	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	48001000 	.word	0x48001000
 80017fc:	48001400 	.word	0x48001400
 8001800:	48001800 	.word	0x48001800
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43d9      	mvns	r1, r3
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	400b      	ands	r3, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa4a 	bl	8000d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c6:	d130      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d4:	d038      	beq.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2232      	movs	r2, #50	; 0x32
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	3301      	adds	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fc:	e002      	b.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3b01      	subs	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001910:	d102      	bne.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f2      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001924:	d110      	bne.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e00f      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d007      	beq.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40007000 	.word	0x40007000
 800195c:	20000000 	.word	0x20000000
 8001960:	431bde83 	.word	0x431bde83

08001964 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e3ca      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001980:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80e4 	beq.w	8001b60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_RCC_OscConfig+0x4a>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	f040 808b 	bne.w	8001abc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f040 8087 	bne.w	8001abc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e3a2      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1a      	ldr	r2, [r3, #32]
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_RCC_OscConfig+0x7c>
 80019d6:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019de:	e005      	b.n	80019ec <HAL_RCC_OscConfig+0x88>
 80019e0:	4b7c      	ldr	r3, [pc, #496]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d223      	bcs.n	8001a38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fd55 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e383      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a04:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a72      	ldr	r2, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	496d      	ldr	r1, [pc, #436]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a22:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	4968      	ldr	r1, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e025      	b.n	8001a84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4960      	ldr	r1, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a56:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	495b      	ldr	r1, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fd15 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e343      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a84:	f000 fc4a 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	4950      	ldr	r1, [pc, #320]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_RCC_OscConfig+0x278>)
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aa4:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb71 	bl	8001190 <HAL_InitTick>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d052      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	e327      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d032      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fbae 	bl	8001230 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fbaa 	bl	8001230 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e310      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4931      	ldr	r1, [pc, #196]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	492c      	ldr	r1, [pc, #176]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e01a      	b.n	8001b60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb7b 	bl	8001230 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fb77 	bl	8001230 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e2dd      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x1da>
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d074      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x21a>
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d10e      	bne.n	8001b96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d064      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d160      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e2ba      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x24a>
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e026      	b.n	8001bfc <HAL_RCC_OscConfig+0x298>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb6:	d115      	bne.n	8001be4 <HAL_RCC_OscConfig+0x280>
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a02      	ldr	r2, [pc, #8]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x298>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	080052cc 	.word	0x080052cc
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004
 8001be4:	4ba0      	ldr	r3, [pc, #640]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9f      	ldr	r2, [pc, #636]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a9c      	ldr	r2, [pc, #624]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb14 	bl	8001230 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fb10 	bl	8001230 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e276      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2a8>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb00 	bl	8001230 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fafc 	bl	8001230 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e262      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d0>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d060      	beq.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x310>
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d119      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d116      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x328>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e23f      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	4973      	ldr	r1, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca0:	e040      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d023      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fabb 	bl	8001230 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fab7 	bl	8001230 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e21d      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd0:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	495f      	ldr	r1, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
 8001cf0:	e018      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5c      	ldr	r2, [pc, #368]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fa97 	bl	8001230 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fa93 	bl	8001230 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1f9      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03c      	beq.n	8001daa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa72 	bl	8001230 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa6e 	bl	8001230 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1d4      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ef      	beq.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001d70:	e01b      	b.n	8001daa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d78:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff fa55 	bl	8001230 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fa51 	bl	8001230 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1b7      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ef      	bne.n	8001d8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80a6 	beq.w	8001f04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x508>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d118      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_OscConfig+0x508>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x508>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fa18 	bl	8001230 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7ff fa14 	bl	8001230 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e17a      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCC_OscConfig+0x508>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4d8>
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3a:	e029      	b.n	8001e90 <HAL_RCC_OscConfig+0x52c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d115      	bne.n	8001e70 <HAL_RCC_OscConfig+0x50c>
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x52c>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	4b9c      	ldr	r3, [pc, #624]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	4a9b      	ldr	r2, [pc, #620]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e80:	4b98      	ldr	r3, [pc, #608]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a97      	ldr	r2, [pc, #604]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d016      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f9ca 	bl	8001230 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f9c6 	bl	8001230 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e12a      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ed      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x53c>
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f9b3 	bl	8001230 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff f9af 	bl	8001230 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e113      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee4:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ed      	bne.n	8001ece <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef8:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80fe 	beq.w	800210a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	f040 80d0 	bne.w	80020b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f18:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d130      	bne.n	8001f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	3b01      	subs	r3, #1
 8001f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d127      	bne.n	8001f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d11f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f58:	2a07      	cmp	r2, #7
 8001f5a:	bf14      	ite	ne
 8001f5c:	2201      	movne	r2, #1
 8001f5e:	2200      	moveq	r2, #0
 8001f60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d113      	bne.n	8001f8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d06e      	beq.n	800206c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d069      	beq.n	8002068 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0ad      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a4b      	ldr	r2, [pc, #300]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fbc:	f7ff f938 	bl	8001230 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff f934 	bl	8001230 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e09a      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_RCC_OscConfig+0x784>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ff2:	3a01      	subs	r2, #1
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ffc:	0212      	lsls	r2, r2, #8
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	3a01      	subs	r2, #1
 8002008:	0552      	lsls	r2, r2, #21
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002010:	0852      	lsrs	r2, r2, #1
 8002012:	3a01      	subs	r2, #1
 8002014:	0652      	lsls	r2, r2, #25
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800201c:	0912      	lsrs	r2, r2, #4
 800201e:	0452      	lsls	r2, r2, #17
 8002020:	430a      	orrs	r2, r1
 8002022:	4930      	ldr	r1, [pc, #192]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8002024:	4313      	orrs	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002040:	f7ff f8f6 	bl	8001230 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f8f2 	bl	8001230 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e058      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002066:	e050      	b.n	800210a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e04f      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d148      	bne.n	800210a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002090:	f7ff f8ce 	bl	8001230 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f8ca 	bl	8001230 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e030      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x734>
 80020b6:	e028      	b.n	800210a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d023      	beq.n	8002106 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_RCC_OscConfig+0x780>)
 80020c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f8b1 	bl	8001230 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d0:	e00c      	b.n	80020ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f8ad 	bl	8001230 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d905      	bls.n	80020ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_OscConfig+0x7b0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ec      	bne.n	80020d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_OscConfig+0x7b0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4905      	ldr	r1, [pc, #20]	; (8002114 <HAL_RCC_OscConfig+0x7b0>)
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x7b4>)
 8002100:	4013      	ands	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e001      	b.n	800210a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	feeefffc 	.word	0xfeeefffc

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0e7      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d910      	bls.n	8002160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0207 	bic.w	r2, r3, #7
 8002146:	4970      	ldr	r1, [pc, #448]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b6e      	ldr	r3, [pc, #440]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0cf      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b66      	ldr	r3, [pc, #408]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002178:	429a      	cmp	r2, r3
 800217a:	d908      	bls.n	800218e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4960      	ldr	r1, [pc, #384]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d04c      	beq.n	8002234 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d121      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0a6      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	4b54      	ldr	r3, [pc, #336]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e09a      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d2:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e08e      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e086      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4943      	ldr	r1, [pc, #268]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002204:	f7ff f814 	bl	8001230 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f810 	bl	8001230 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e06e      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d010      	beq.n	8002262 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224c:	429a      	cmp	r2, r3
 800224e:	d208      	bcs.n	8002262 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	492b      	ldr	r1, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d210      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0207 	bic.w	r2, r3, #7
 8002278:	4923      	ldr	r1, [pc, #140]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e036      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d0:	f000 f824 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	490b      	ldr	r1, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1f4>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80022ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1fc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ff4b 	bl	8001190 <HAL_InitTick>
 80022fa:	4603      	mov	r3, r0
 80022fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80022fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	080052cc 	.word	0x080052cc
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d121      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d11e      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e005      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d102      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e004      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_RCC_GetSysClockFreq+0x114>)
 80023a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d134      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d003      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xac>
 80023c0:	e005      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	e005      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ca:	617b      	str	r3, [r7, #20]
      break;
 80023cc:	e002      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	617b      	str	r3, [r7, #20]
      break;
 80023d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	fb03 f202 	mul.w	r2, r3, r2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	0e5b      	lsrs	r3, r3, #25
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	3301      	adds	r3, #1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002414:	69bb      	ldr	r3, [r7, #24]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	080052e4 	.word	0x080052e4
 800242c:	00f42400 	.word	0x00f42400
 8002430:	007a1200 	.word	0x007a1200

08002434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_RCC_GetHCLKFreq+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002450:	f7ff fff0 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4904      	ldr	r1, [pc, #16]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	080052dc 	.word	0x080052dc

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800247c:	f7ff ffda 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0adb      	lsrs	r3, r3, #11
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	080052dc 	.word	0x080052dc

080024a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024bc:	f7ff f9ee 	bl	800189c <HAL_PWREx_GetVoltageRange>
 80024c0:	6178      	str	r0, [r7, #20]
 80024c2:	e014      	b.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024dc:	f7ff f9de 	bl	800189c <HAL_PWREx_GetVoltageRange>
 80024e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d10b      	bne.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d919      	bls.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002500:	d902      	bls.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002502:	2302      	movs	r3, #2
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e013      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002508:	2301      	movs	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e010      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d902      	bls.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002514:	2303      	movs	r3, #3
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e00a      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d102      	bne.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e004      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d101      	bne.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800252c:	2301      	movs	r3, #1
 800252e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 0207 	bic.w	r2, r3, #7
 8002538:	4909      	ldr	r1, [pc, #36]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002570:	2300      	movs	r3, #0
 8002572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d041      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002584:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002588:	d02a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800258a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800258e:	d824      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800259a:	d81e      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a4:	d010      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025a6:	e018      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a8:	4b86      	ldr	r3, [pc, #536]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a85      	ldr	r2, [pc, #532]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b4:	e015      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fabb 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c6:	e00c      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3320      	adds	r3, #32
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fba6 	bl	8002d20 <RCCEx_PLLSAI2_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d8:	e003      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	74fb      	strb	r3, [r7, #19]
      break;
 80025de:	e000      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10b      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e8:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f6:	4973      	ldr	r1, [pc, #460]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025fe:	e001      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d041      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002618:	d02a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800261a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800261e:	d824      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262a:	d81e      	bhi.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d010      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002636:	e018      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002638:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002644:	e015      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fa73 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002656:	e00c      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3320      	adds	r3, #32
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fb5e 	bl	8002d20 <RCCEx_PLLSAI2_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002668:	e003      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	74fb      	strb	r3, [r7, #19]
      break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002678:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002686:	494f      	ldr	r1, [pc, #316]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800268e:	e001      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a0 	beq.w	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6593      	str	r3, [r2, #88]	; 0x58
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fda4 	bl	8001230 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ea:	e009      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7fe fda0 	bl	8001230 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	74fb      	strb	r3, [r7, #19]
        break;
 80026fe:	e005      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d15c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01f      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	d019      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fd5f 	bl	8001230 <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	e00b      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fd5b 	bl	8001230 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d902      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	74fb      	strb	r3, [r7, #19]
            break;
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ec      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b2:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027ba:	e009      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
 80027c0:	e006      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d0:	7c7b      	ldrb	r3, [r7, #17]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b9e      	ldr	r3, [pc, #632]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a9d      	ldr	r2, [pc, #628]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ee:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 0203 	bic.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	4994      	ldr	r1, [pc, #592]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002810:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 020c 	bic.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	498c      	ldr	r1, [pc, #560]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002832:	4b87      	ldr	r3, [pc, #540]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4983      	ldr	r1, [pc, #524]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002854:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	497b      	ldr	r1, [pc, #492]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002876:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002884:	4972      	ldr	r1, [pc, #456]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002898:	4b6d      	ldr	r3, [pc, #436]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	496a      	ldr	r1, [pc, #424]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	4961      	ldr	r1, [pc, #388]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028dc:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	4959      	ldr	r1, [pc, #356]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290c:	4950      	ldr	r1, [pc, #320]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002920:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	4948      	ldr	r1, [pc, #288]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	493f      	ldr	r1, [pc, #252]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d028      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	4937      	ldr	r1, [pc, #220]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002982:	d106      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298e:	60d3      	str	r3, [r2, #12]
 8002990:	e011      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800299a:	d10c      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f8c8 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029c2:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	491f      	ldr	r1, [pc, #124]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ec:	60d3      	str	r3, [r2, #12]
 80029ee:	e011      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f899 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02b      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4a:	60d3      	str	r3, [r2, #12]
 8002a4c:	e014      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2101      	movs	r1, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f867 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02f      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a92:	4928      	ldr	r1, [pc, #160]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f844 	bl	8002b38 <RCCEx_PLLSAI1_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d014      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	74bb      	strb	r3, [r7, #18]
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3320      	adds	r3, #32
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f925 	bl	8002d20 <RCCEx_PLLSAI2_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	490d      	ldr	r1, [pc, #52]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000

08002b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b46:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0203 	and.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10d      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
       ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b6a:	4b6c      	ldr	r3, [pc, #432]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
       ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d047      	beq.n	8002c0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e044      	b.n	8002c0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d018      	beq.n	8002bbe <RCCEx_PLLSAI1_Config+0x86>
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d825      	bhi.n	8002bdc <RCCEx_PLLSAI1_Config+0xa4>
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <RCCEx_PLLSAI1_Config+0x62>
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d009      	beq.n	8002bac <RCCEx_PLLSAI1_Config+0x74>
 8002b98:	e020      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e01a      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bac:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e013      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bda:	e006      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e004      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be2:	bf00      	nop
 8002be4:	e002      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	430b      	orrs	r3, r1
 8002c08:	4944      	ldr	r1, [pc, #272]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d17d      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe fb06 	bl	8001230 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c26:	e009      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c28:	f7fe fb02 	bl	8001230 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3a:	e005      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ef      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d160      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	0912      	lsrs	r2, r2, #4
 8002c6c:	0452      	lsls	r2, r2, #17
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	492a      	ldr	r1, [pc, #168]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	610b      	str	r3, [r1, #16]
 8002c76:	e027      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d112      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6892      	ldr	r2, [r2, #8]
 8002c8e:	0211      	lsls	r1, r2, #8
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6912      	ldr	r2, [r2, #16]
 8002c94:	0852      	lsrs	r2, r2, #1
 8002c96:	3a01      	subs	r2, #1
 8002c98:	0552      	lsls	r2, r2, #21
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	491f      	ldr	r1, [pc, #124]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	610b      	str	r3, [r1, #16]
 8002ca2:	e011      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6892      	ldr	r2, [r2, #8]
 8002cb4:	0211      	lsls	r1, r2, #8
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6952      	ldr	r2, [r2, #20]
 8002cba:	0852      	lsrs	r2, r2, #1
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	0652      	lsls	r2, r2, #25
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4916      	ldr	r1, [pc, #88]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe faac 	bl	8001230 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cda:	e009      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cdc:	f7fe faa8 	bl	8001230 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	73fb      	strb	r3, [r7, #15]
          break;
 8002cee:	e005      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ef      	beq.n	8002cdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4904      	ldr	r1, [pc, #16]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0203 	and.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d10d      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
       ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d047      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e044      	b.n	8002df6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d018      	beq.n	8002da6 <RCCEx_PLLSAI2_Config+0x86>
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d825      	bhi.n	8002dc4 <RCCEx_PLLSAI2_Config+0xa4>
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d002      	beq.n	8002d82 <RCCEx_PLLSAI2_Config+0x62>
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d009      	beq.n	8002d94 <RCCEx_PLLSAI2_Config+0x74>
 8002d80:	e020      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d82:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11d      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d92:	e01a      	b.n	8002dca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d116      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da4:	e013      	b.n	8002dce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002da6:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dc2:	e006      	b.n	8002dd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e004      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	430b      	orrs	r3, r1
 8002df0:	4939      	ldr	r1, [pc, #228]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d167      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e08:	f7fe fa12 	bl	8001230 <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e0e:	e009      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e10:	f7fe fa0e 	bl	8001230 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	73fb      	strb	r3, [r7, #15]
        break;
 8002e22:	e005      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ef      	bne.n	8002e10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14a      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	0211      	lsls	r1, r2, #8
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	0912      	lsrs	r2, r2, #4
 8002e54:	0452      	lsls	r2, r2, #17
 8002e56:	430a      	orrs	r2, r1
 8002e58:	491f      	ldr	r1, [pc, #124]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	614b      	str	r3, [r1, #20]
 8002e5e:	e011      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6892      	ldr	r2, [r2, #8]
 8002e70:	0211      	lsls	r1, r2, #8
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6912      	ldr	r2, [r2, #16]
 8002e76:	0852      	lsrs	r2, r2, #1
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0652      	lsls	r2, r2, #25
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4916      	ldr	r1, [pc, #88]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f9ce 	bl	8001230 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e96:	e009      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e98:	f7fe f9ca 	bl	8001230 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eaa:	e005      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ef      	beq.n	8002e98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e049      	b.n	8002f82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd ff64 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 fa9a 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e04f      	b.n	8003044 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d018      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_TIM_Base_Start_IT+0xd0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0x76>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d115      	bne.n	800302e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_TIM_Base_Start_IT+0xdc>)
 800300a:	4013      	ands	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b06      	cmp	r3, #6
 8003012:	d015      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0xb4>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d011      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	e008      	b.n	8003040 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e000      	b.n	8003042 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40000400 	.word	0x40000400
 8003058:	40000800 	.word	0x40000800
 800305c:	40000c00 	.word	0x40000c00
 8003060:	40013400 	.word	0x40013400
 8003064:	40014000 	.word	0x40014000
 8003068:	00010007 	.word	0x00010007

0800306c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d020      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0202 	mvn.w	r2, #2
 80030a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9ad 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f99f 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f9b0 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d020      	beq.n	800311c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0204 	mvn.w	r2, #4
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f987 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f979 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f98a 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0208 	mvn.w	r2, #8
 8003138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2204      	movs	r2, #4
 800313e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f961 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f953 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f964 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d020      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0210 	mvn.w	r2, #16
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2208      	movs	r2, #8
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f93b 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f92d 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f93e 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0201 	mvn.w	r2, #1
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fdc2 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 faf2 	bl	80037e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 faea 	bl	80037f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8fd 	bl	800343e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0220 	mvn.w	r2, #32
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fab2 	bl	80037cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIM_ConfigClockSource+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e0b6      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x18a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d03e      	beq.n	8003348 <HAL_TIM_ConfigClockSource+0xd8>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	f200 8087 	bhi.w	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	f000 8086 	beq.w	80033e6 <HAL_TIM_ConfigClockSource+0x176>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d87f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d01a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xaa>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d87b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d050      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x11e>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d877      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d03c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xfe>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d873      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d058      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x13e>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d86f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d064      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d86b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d060      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d867      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d05a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15e>
 8003318:	e062      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332a:	f000 f9a7 	bl	800367c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800333c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]
      break;
 8003346:	e04f      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	f000 f990 	bl	800367c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	609a      	str	r2, [r3, #8]
      break;
 800336c:	e03c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	461a      	mov	r2, r3
 800337c:	f000 f904 	bl	8003588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2150      	movs	r1, #80	; 0x50
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f95d 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 800338c:	e02c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339a:	461a      	mov	r2, r3
 800339c:	f000 f923 	bl	80035e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2160      	movs	r1, #96	; 0x60
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f94d 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033ac:	e01c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 f8e4 	bl	8003588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f93d 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e00c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f000 f934 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80033de:	e003      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3d      	ldr	r2, [pc, #244]	; (800356c <TIM_Base_SetConfig+0x118>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <TIM_Base_SetConfig+0x120>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <TIM_Base_SetConfig+0x114>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2c      	ldr	r2, [pc, #176]	; (800356c <TIM_Base_SetConfig+0x118>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <TIM_Base_SetConfig+0x120>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <TIM_Base_SetConfig+0x124>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a28      	ldr	r2, [pc, #160]	; (800357c <TIM_Base_SetConfig+0x128>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <TIM_Base_SetConfig+0x130>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <TIM_Base_SetConfig+0x128>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a10      	ldr	r2, [pc, #64]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <TIM_Base_SetConfig+0x130>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 030a 	bic.w	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 0210 	bic.w	r2, r3, #16
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0307 	orr.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e068      	b.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800370e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01d      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d018      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00e      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10c      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	4313      	orrs	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40013400 	.word	0x40013400
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e040      	b.n	800389c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fb0a 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fb6a 	bl	8003f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8af 	bl	80039b8 <UART_SetConfig>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fbe9 	bl	800406c <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d178      	bne.n	80039ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Transmit+0x24>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e071      	b.n	80039b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038da:	f7fd fca9 	bl	8001230 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d108      	bne.n	800390c <HAL_UART_Transmit+0x68>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003914:	e030      	b.n	8003978 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fc4b 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e03c      	b.n	80039b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	881a      	ldrh	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003948:	b292      	uxth	r2, r2
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	3302      	adds	r3, #2
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e008      	b.n	8003966 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b292      	uxth	r2, r2
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1c8      	bne.n	8003916 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fc14 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e005      	b.n	80039b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b08a      	sub	sp, #40	; 0x28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4313      	orrs	r3, r2
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4ba4      	ldr	r3, [pc, #656]	; (8003c78 <UART_SetConfig+0x2c0>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a99      	ldr	r2, [pc, #612]	; (8003c7c <UART_SetConfig+0x2c4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	4313      	orrs	r3, r2
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a90      	ldr	r2, [pc, #576]	; (8003c80 <UART_SetConfig+0x2c8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d126      	bne.n	8003a90 <UART_SetConfig+0xd8>
 8003a42:	4b90      	ldr	r3, [pc, #576]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d81b      	bhi.n	8003a88 <UART_SetConfig+0xd0>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0xa0>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a81 	.word	0x08003a81
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e116      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003a70:	2302      	movs	r3, #2
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e112      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e10e      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003a80:	2308      	movs	r3, #8
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e10a      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e106      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7c      	ldr	r2, [pc, #496]	; (8003c88 <UART_SetConfig+0x2d0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d138      	bne.n	8003b0c <UART_SetConfig+0x154>
 8003a9a:	4b7a      	ldr	r3, [pc, #488]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d82d      	bhi.n	8003b04 <UART_SetConfig+0x14c>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0xf8>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003b05 	.word	0x08003b05
 8003abc:	08003b05 	.word	0x08003b05
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e0d8      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e0d4      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e0d0      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e0cc      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e0c8      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5e      	ldr	r2, [pc, #376]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d125      	bne.n	8003b62 <UART_SetConfig+0x1aa>
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d016      	beq.n	8003b52 <UART_SetConfig+0x19a>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d818      	bhi.n	8003b5a <UART_SetConfig+0x1a2>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d00a      	beq.n	8003b42 <UART_SetConfig+0x18a>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d814      	bhi.n	8003b5a <UART_SetConfig+0x1a2>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <UART_SetConfig+0x182>
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d008      	beq.n	8003b4a <UART_SetConfig+0x192>
 8003b38:	e00f      	b.n	8003b5a <UART_SetConfig+0x1a2>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b40:	e0ad      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b42:	2302      	movs	r3, #2
 8003b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b48:	e0a9      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b50:	e0a5      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b52:	2308      	movs	r3, #8
 8003b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b58:	e0a1      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b60:	e09d      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <UART_SetConfig+0x2d8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d125      	bne.n	8003bb8 <UART_SetConfig+0x200>
 8003b6c:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b76:	2bc0      	cmp	r3, #192	; 0xc0
 8003b78:	d016      	beq.n	8003ba8 <UART_SetConfig+0x1f0>
 8003b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b7c:	d818      	bhi.n	8003bb0 <UART_SetConfig+0x1f8>
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d00a      	beq.n	8003b98 <UART_SetConfig+0x1e0>
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d814      	bhi.n	8003bb0 <UART_SetConfig+0x1f8>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <UART_SetConfig+0x1d8>
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d008      	beq.n	8003ba0 <UART_SetConfig+0x1e8>
 8003b8e:	e00f      	b.n	8003bb0 <UART_SetConfig+0x1f8>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e082      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9e:	e07e      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e07a      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e076      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e072      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a35      	ldr	r2, [pc, #212]	; (8003c94 <UART_SetConfig+0x2dc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12a      	bne.n	8003c18 <UART_SetConfig+0x260>
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd0:	d01a      	beq.n	8003c08 <UART_SetConfig+0x250>
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd6:	d81b      	bhi.n	8003c10 <UART_SetConfig+0x258>
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d00c      	beq.n	8003bf8 <UART_SetConfig+0x240>
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be2:	d815      	bhi.n	8003c10 <UART_SetConfig+0x258>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <UART_SetConfig+0x238>
 8003be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bec:	d008      	beq.n	8003c00 <UART_SetConfig+0x248>
 8003bee:	e00f      	b.n	8003c10 <UART_SetConfig+0x258>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf6:	e052      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e04e      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c00:	2304      	movs	r3, #4
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e04a      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c08:	2308      	movs	r3, #8
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e046      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c10:	2310      	movs	r3, #16
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e042      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <UART_SetConfig+0x2c4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d13a      	bne.n	8003c98 <UART_SetConfig+0x2e0>
 8003c22:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c30:	d01a      	beq.n	8003c68 <UART_SetConfig+0x2b0>
 8003c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c36:	d81b      	bhi.n	8003c70 <UART_SetConfig+0x2b8>
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d00c      	beq.n	8003c58 <UART_SetConfig+0x2a0>
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c42:	d815      	bhi.n	8003c70 <UART_SetConfig+0x2b8>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <UART_SetConfig+0x298>
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d008      	beq.n	8003c60 <UART_SetConfig+0x2a8>
 8003c4e:	e00f      	b.n	8003c70 <UART_SetConfig+0x2b8>
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e022      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e01e      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e01a      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e016      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e012      	b.n	8003c9e <UART_SetConfig+0x2e6>
 8003c78:	efff69f3 	.word	0xefff69f3
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40004400 	.word	0x40004400
 8003c8c:	40004800 	.word	0x40004800
 8003c90:	40004c00 	.word	0x40004c00
 8003c94:	40005000 	.word	0x40005000
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a9f      	ldr	r2, [pc, #636]	; (8003f20 <UART_SetConfig+0x568>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d17a      	bne.n	8003d9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d824      	bhi.n	8003cfa <UART_SetConfig+0x342>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <UART_SetConfig+0x300>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003ceb 	.word	0x08003ceb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003cfb 	.word	0x08003cfb
 8003cd8:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe fbb6 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003ce0:	61f8      	str	r0, [r7, #28]
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <UART_SetConfig+0x56c>)
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fb17 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003cee:	61f8      	str	r0, [r7, #28]
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	61fb      	str	r3, [r7, #28]
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80fb 	beq.w	8003f04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d305      	bcc.n	8003d2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d903      	bls.n	8003d32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d30:	e0e8      	b.n	8003f04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2200      	movs	r2, #0
 8003d36:	461c      	mov	r4, r3
 8003d38:	4615      	mov	r5, r2
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	022b      	lsls	r3, r5, #8
 8003d44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d48:	0222      	lsls	r2, r4, #8
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	6849      	ldr	r1, [r1, #4]
 8003d4e:	0849      	lsrs	r1, r1, #1
 8003d50:	2000      	movs	r0, #0
 8003d52:	4688      	mov	r8, r1
 8003d54:	4681      	mov	r9, r0
 8003d56:	eb12 0a08 	adds.w	sl, r2, r8
 8003d5a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	4659      	mov	r1, fp
 8003d70:	f7fc fa7e 	bl	8000270 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d82:	d308      	bcc.n	8003d96 <UART_SetConfig+0x3de>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8a:	d204      	bcs.n	8003d96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	e0b6      	b.n	8003f04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d9c:	e0b2      	b.n	8003f04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da6:	d15e      	bne.n	8003e66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d828      	bhi.n	8003e02 <UART_SetConfig+0x44a>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x400>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fb36 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003de0:	61f8      	str	r0, [r7, #28]
        break;
 8003de2:	e014      	b.n	8003e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fb48 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8003de8:	61f8      	str	r0, [r7, #28]
        break;
 8003dea:	e010      	b.n	8003e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <UART_SetConfig+0x56c>)
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e00d      	b.n	8003e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fa93 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003df6:	61f8      	str	r0, [r7, #28]
        break;
 8003df8:	e009      	b.n	8003e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e005      	b.n	8003e0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d077      	beq.n	8003f04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005a      	lsls	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	441a      	add	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d916      	bls.n	8003e5e <UART_SetConfig+0x4a6>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d212      	bcs.n	8003e5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	8afb      	ldrh	r3, [r7, #22]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	8afa      	ldrh	r2, [r7, #22]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e052      	b.n	8003f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e64:	e04e      	b.n	8003f04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d827      	bhi.n	8003ebe <UART_SetConfig+0x506>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x4bc>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe fad8 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003e9c:	61f8      	str	r0, [r7, #28]
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe faea 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	61f8      	str	r0, [r7, #28]
        break;
 8003ea6:	e010      	b.n	8003eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <UART_SetConfig+0x56c>)
 8003eaa:	61fb      	str	r3, [r7, #28]
        break;
 8003eac:	e00d      	b.n	8003eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe fa35 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003eb2:	61f8      	str	r0, [r7, #28]
        break;
 8003eb4:	e009      	b.n	8003eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61fb      	str	r3, [r7, #28]
        break;
 8003ebc:	e005      	b.n	8003eca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d019      	beq.n	8003f04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	085a      	lsrs	r2, r3, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d909      	bls.n	8003efe <UART_SetConfig+0x546>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d205      	bcs.n	8003efe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e002      	b.n	8003f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	; 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40008000 	.word	0x40008000
 8003f24:	00f42400 	.word	0x00f42400

08003f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01a      	beq.n	800403e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004026:	d10a      	bne.n	800403e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b098      	sub	sp, #96	; 0x60
 8004070:	af02      	add	r7, sp, #8
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800407c:	f7fd f8d8 	bl	8001230 <HAL_GetTick>
 8004080:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d12e      	bne.n	80040ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f88c 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d021      	beq.n	80040ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040be:	653b      	str	r3, [r7, #80]	; 0x50
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e062      	b.n	80041b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d149      	bne.n	8004190 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f856 	bl	80041bc <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03c      	beq.n	8004190 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	623b      	str	r3, [r7, #32]
   return(result);
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	60fb      	str	r3, [r7, #12]
   return(result);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004168:	61fa      	str	r2, [r7, #28]
 800416a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	617b      	str	r3, [r7, #20]
   return(result);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e011      	b.n	80041b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3758      	adds	r7, #88	; 0x58
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041cc:	e049      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d045      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fd f82b 	bl	8001230 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <UART_WaitOnFlagUntilTimeout+0x30>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e048      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d031      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d110      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2208      	movs	r2, #8
 8004212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f838 	bl	800428a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2208      	movs	r2, #8
 800421e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e029      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d111      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f81e 	bl	800428a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00f      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d0a6      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b095      	sub	sp, #84	; 0x54
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
 80042b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d118      	bne.n	8004332 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60bb      	str	r3, [r7, #8]
   return(result);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0310 	bic.w	r3, r3, #16
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004346:	bf00      	nop
 8004348:	3754      	adds	r7, #84	; 0x54
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <std>:
 8004354:	2300      	movs	r3, #0
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	e9c0 3300 	strd	r3, r3, [r0]
 800435e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004362:	6083      	str	r3, [r0, #8]
 8004364:	8181      	strh	r1, [r0, #12]
 8004366:	6643      	str	r3, [r0, #100]	; 0x64
 8004368:	81c2      	strh	r2, [r0, #14]
 800436a:	6183      	str	r3, [r0, #24]
 800436c:	4619      	mov	r1, r3
 800436e:	2208      	movs	r2, #8
 8004370:	305c      	adds	r0, #92	; 0x5c
 8004372:	f000 f9f7 	bl	8004764 <memset>
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <std+0x58>)
 8004378:	6263      	str	r3, [r4, #36]	; 0x24
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <std+0x5c>)
 800437c:	62a3      	str	r3, [r4, #40]	; 0x28
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <std+0x60>)
 8004380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <std+0x64>)
 8004384:	6323      	str	r3, [r4, #48]	; 0x30
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <std+0x68>)
 8004388:	6224      	str	r4, [r4, #32]
 800438a:	429c      	cmp	r4, r3
 800438c:	d006      	beq.n	800439c <std+0x48>
 800438e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004392:	4294      	cmp	r4, r2
 8004394:	d002      	beq.n	800439c <std+0x48>
 8004396:	33d0      	adds	r3, #208	; 0xd0
 8004398:	429c      	cmp	r4, r3
 800439a:	d105      	bne.n	80043a8 <std+0x54>
 800439c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a4:	f000 ba56 	b.w	8004854 <__retarget_lock_init_recursive>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	bf00      	nop
 80043ac:	080045b5 	.word	0x080045b5
 80043b0:	080045d7 	.word	0x080045d7
 80043b4:	0800460f 	.word	0x0800460f
 80043b8:	08004633 	.word	0x08004633
 80043bc:	20000200 	.word	0x20000200

080043c0 <stdio_exit_handler>:
 80043c0:	4a02      	ldr	r2, [pc, #8]	; (80043cc <stdio_exit_handler+0xc>)
 80043c2:	4903      	ldr	r1, [pc, #12]	; (80043d0 <stdio_exit_handler+0x10>)
 80043c4:	4803      	ldr	r0, [pc, #12]	; (80043d4 <stdio_exit_handler+0x14>)
 80043c6:	f000 b869 	b.w	800449c <_fwalk_sglue>
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c
 80043d0:	08005101 	.word	0x08005101
 80043d4:	20000018 	.word	0x20000018

080043d8 <cleanup_stdio>:
 80043d8:	6841      	ldr	r1, [r0, #4]
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <cleanup_stdio+0x34>)
 80043dc:	4299      	cmp	r1, r3
 80043de:	b510      	push	{r4, lr}
 80043e0:	4604      	mov	r4, r0
 80043e2:	d001      	beq.n	80043e8 <cleanup_stdio+0x10>
 80043e4:	f000 fe8c 	bl	8005100 <_fflush_r>
 80043e8:	68a1      	ldr	r1, [r4, #8]
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <cleanup_stdio+0x38>)
 80043ec:	4299      	cmp	r1, r3
 80043ee:	d002      	beq.n	80043f6 <cleanup_stdio+0x1e>
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 fe85 	bl	8005100 <_fflush_r>
 80043f6:	68e1      	ldr	r1, [r4, #12]
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <cleanup_stdio+0x3c>)
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d004      	beq.n	8004408 <cleanup_stdio+0x30>
 80043fe:	4620      	mov	r0, r4
 8004400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004404:	f000 be7c 	b.w	8005100 <_fflush_r>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	bf00      	nop
 800440c:	20000200 	.word	0x20000200
 8004410:	20000268 	.word	0x20000268
 8004414:	200002d0 	.word	0x200002d0

08004418 <global_stdio_init.part.0>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <global_stdio_init.part.0+0x30>)
 800441c:	4c0b      	ldr	r4, [pc, #44]	; (800444c <global_stdio_init.part.0+0x34>)
 800441e:	4a0c      	ldr	r2, [pc, #48]	; (8004450 <global_stdio_init.part.0+0x38>)
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4620      	mov	r0, r4
 8004424:	2200      	movs	r2, #0
 8004426:	2104      	movs	r1, #4
 8004428:	f7ff ff94 	bl	8004354 <std>
 800442c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004430:	2201      	movs	r2, #1
 8004432:	2109      	movs	r1, #9
 8004434:	f7ff ff8e 	bl	8004354 <std>
 8004438:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800443c:	2202      	movs	r2, #2
 800443e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004442:	2112      	movs	r1, #18
 8004444:	f7ff bf86 	b.w	8004354 <std>
 8004448:	20000338 	.word	0x20000338
 800444c:	20000200 	.word	0x20000200
 8004450:	080043c1 	.word	0x080043c1

08004454 <__sfp_lock_acquire>:
 8004454:	4801      	ldr	r0, [pc, #4]	; (800445c <__sfp_lock_acquire+0x8>)
 8004456:	f000 b9fe 	b.w	8004856 <__retarget_lock_acquire_recursive>
 800445a:	bf00      	nop
 800445c:	20000341 	.word	0x20000341

08004460 <__sfp_lock_release>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__sfp_lock_release+0x8>)
 8004462:	f000 b9f9 	b.w	8004858 <__retarget_lock_release_recursive>
 8004466:	bf00      	nop
 8004468:	20000341 	.word	0x20000341

0800446c <__sinit>:
 800446c:	b510      	push	{r4, lr}
 800446e:	4604      	mov	r4, r0
 8004470:	f7ff fff0 	bl	8004454 <__sfp_lock_acquire>
 8004474:	6a23      	ldr	r3, [r4, #32]
 8004476:	b11b      	cbz	r3, 8004480 <__sinit+0x14>
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447c:	f7ff bff0 	b.w	8004460 <__sfp_lock_release>
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <__sinit+0x28>)
 8004482:	6223      	str	r3, [r4, #32]
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <__sinit+0x2c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f5      	bne.n	8004478 <__sinit+0xc>
 800448c:	f7ff ffc4 	bl	8004418 <global_stdio_init.part.0>
 8004490:	e7f2      	b.n	8004478 <__sinit+0xc>
 8004492:	bf00      	nop
 8004494:	080043d9 	.word	0x080043d9
 8004498:	20000338 	.word	0x20000338

0800449c <_fwalk_sglue>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4607      	mov	r7, r0
 80044a2:	4688      	mov	r8, r1
 80044a4:	4614      	mov	r4, r2
 80044a6:	2600      	movs	r6, #0
 80044a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ac:	f1b9 0901 	subs.w	r9, r9, #1
 80044b0:	d505      	bpl.n	80044be <_fwalk_sglue+0x22>
 80044b2:	6824      	ldr	r4, [r4, #0]
 80044b4:	2c00      	cmp	r4, #0
 80044b6:	d1f7      	bne.n	80044a8 <_fwalk_sglue+0xc>
 80044b8:	4630      	mov	r0, r6
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d907      	bls.n	80044d4 <_fwalk_sglue+0x38>
 80044c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d003      	beq.n	80044d4 <_fwalk_sglue+0x38>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	4306      	orrs	r6, r0
 80044d4:	3568      	adds	r5, #104	; 0x68
 80044d6:	e7e9      	b.n	80044ac <_fwalk_sglue+0x10>

080044d8 <iprintf>:
 80044d8:	b40f      	push	{r0, r1, r2, r3}
 80044da:	b507      	push	{r0, r1, r2, lr}
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <iprintf+0x20>)
 80044de:	ab04      	add	r3, sp, #16
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e6:	6881      	ldr	r1, [r0, #8]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	f000 fad9 	bl	8004aa0 <_vfiprintf_r>
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f4:	b004      	add	sp, #16
 80044f6:	4770      	bx	lr
 80044f8:	20000064 	.word	0x20000064

080044fc <_puts_r>:
 80044fc:	6a03      	ldr	r3, [r0, #32]
 80044fe:	b570      	push	{r4, r5, r6, lr}
 8004500:	6884      	ldr	r4, [r0, #8]
 8004502:	4605      	mov	r5, r0
 8004504:	460e      	mov	r6, r1
 8004506:	b90b      	cbnz	r3, 800450c <_puts_r+0x10>
 8004508:	f7ff ffb0 	bl	800446c <__sinit>
 800450c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d405      	bmi.n	800451e <_puts_r+0x22>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	0598      	lsls	r0, r3, #22
 8004516:	d402      	bmi.n	800451e <_puts_r+0x22>
 8004518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800451a:	f000 f99c 	bl	8004856 <__retarget_lock_acquire_recursive>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	0719      	lsls	r1, r3, #28
 8004522:	d513      	bpl.n	800454c <_puts_r+0x50>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	b18b      	cbz	r3, 800454c <_puts_r+0x50>
 8004528:	3e01      	subs	r6, #1
 800452a:	68a3      	ldr	r3, [r4, #8]
 800452c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004530:	3b01      	subs	r3, #1
 8004532:	60a3      	str	r3, [r4, #8]
 8004534:	b9e9      	cbnz	r1, 8004572 <_puts_r+0x76>
 8004536:	2b00      	cmp	r3, #0
 8004538:	da2e      	bge.n	8004598 <_puts_r+0x9c>
 800453a:	4622      	mov	r2, r4
 800453c:	210a      	movs	r1, #10
 800453e:	4628      	mov	r0, r5
 8004540:	f000 f87b 	bl	800463a <__swbuf_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d007      	beq.n	8004558 <_puts_r+0x5c>
 8004548:	250a      	movs	r5, #10
 800454a:	e007      	b.n	800455c <_puts_r+0x60>
 800454c:	4621      	mov	r1, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f8b0 	bl	80046b4 <__swsetup_r>
 8004554:	2800      	cmp	r0, #0
 8004556:	d0e7      	beq.n	8004528 <_puts_r+0x2c>
 8004558:	f04f 35ff 	mov.w	r5, #4294967295
 800455c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800455e:	07da      	lsls	r2, r3, #31
 8004560:	d405      	bmi.n	800456e <_puts_r+0x72>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	059b      	lsls	r3, r3, #22
 8004566:	d402      	bmi.n	800456e <_puts_r+0x72>
 8004568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800456a:	f000 f975 	bl	8004858 <__retarget_lock_release_recursive>
 800456e:	4628      	mov	r0, r5
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	2b00      	cmp	r3, #0
 8004574:	da04      	bge.n	8004580 <_puts_r+0x84>
 8004576:	69a2      	ldr	r2, [r4, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	dc06      	bgt.n	800458a <_puts_r+0x8e>
 800457c:	290a      	cmp	r1, #10
 800457e:	d004      	beq.n	800458a <_puts_r+0x8e>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	6022      	str	r2, [r4, #0]
 8004586:	7019      	strb	r1, [r3, #0]
 8004588:	e7cf      	b.n	800452a <_puts_r+0x2e>
 800458a:	4622      	mov	r2, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f854 	bl	800463a <__swbuf_r>
 8004592:	3001      	adds	r0, #1
 8004594:	d1c9      	bne.n	800452a <_puts_r+0x2e>
 8004596:	e7df      	b.n	8004558 <_puts_r+0x5c>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	250a      	movs	r5, #10
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	6022      	str	r2, [r4, #0]
 80045a0:	701d      	strb	r5, [r3, #0]
 80045a2:	e7db      	b.n	800455c <_puts_r+0x60>

080045a4 <puts>:
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <puts+0xc>)
 80045a6:	4601      	mov	r1, r0
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f7ff bfa7 	b.w	80044fc <_puts_r>
 80045ae:	bf00      	nop
 80045b0:	20000064 	.word	0x20000064

080045b4 <__sread>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	460c      	mov	r4, r1
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	f000 f8fc 	bl	80047b8 <_read_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	bfab      	itete	ge
 80045c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045c6:	89a3      	ldrhlt	r3, [r4, #12]
 80045c8:	181b      	addge	r3, r3, r0
 80045ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045ce:	bfac      	ite	ge
 80045d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80045d2:	81a3      	strhlt	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__swrite>:
 80045d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045da:	461f      	mov	r7, r3
 80045dc:	898b      	ldrh	r3, [r1, #12]
 80045de:	05db      	lsls	r3, r3, #23
 80045e0:	4605      	mov	r5, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	4616      	mov	r6, r2
 80045e6:	d505      	bpl.n	80045f4 <__swrite+0x1e>
 80045e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ec:	2302      	movs	r3, #2
 80045ee:	2200      	movs	r2, #0
 80045f0:	f000 f8d0 	bl	8004794 <_lseek_r>
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	4632      	mov	r2, r6
 8004602:	463b      	mov	r3, r7
 8004604:	4628      	mov	r0, r5
 8004606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800460a:	f000 b8e7 	b.w	80047dc <_write_r>

0800460e <__sseek>:
 800460e:	b510      	push	{r4, lr}
 8004610:	460c      	mov	r4, r1
 8004612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004616:	f000 f8bd 	bl	8004794 <_lseek_r>
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	bf15      	itete	ne
 8004620:	6560      	strne	r0, [r4, #84]	; 0x54
 8004622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800462a:	81a3      	strheq	r3, [r4, #12]
 800462c:	bf18      	it	ne
 800462e:	81a3      	strhne	r3, [r4, #12]
 8004630:	bd10      	pop	{r4, pc}

08004632 <__sclose>:
 8004632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004636:	f000 b89d 	b.w	8004774 <_close_r>

0800463a <__swbuf_r>:
 800463a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463c:	460e      	mov	r6, r1
 800463e:	4614      	mov	r4, r2
 8004640:	4605      	mov	r5, r0
 8004642:	b118      	cbz	r0, 800464c <__swbuf_r+0x12>
 8004644:	6a03      	ldr	r3, [r0, #32]
 8004646:	b90b      	cbnz	r3, 800464c <__swbuf_r+0x12>
 8004648:	f7ff ff10 	bl	800446c <__sinit>
 800464c:	69a3      	ldr	r3, [r4, #24]
 800464e:	60a3      	str	r3, [r4, #8]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	071a      	lsls	r2, r3, #28
 8004654:	d525      	bpl.n	80046a2 <__swbuf_r+0x68>
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	b31b      	cbz	r3, 80046a2 <__swbuf_r+0x68>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	6922      	ldr	r2, [r4, #16]
 800465e:	1a98      	subs	r0, r3, r2
 8004660:	6963      	ldr	r3, [r4, #20]
 8004662:	b2f6      	uxtb	r6, r6
 8004664:	4283      	cmp	r3, r0
 8004666:	4637      	mov	r7, r6
 8004668:	dc04      	bgt.n	8004674 <__swbuf_r+0x3a>
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 fd47 	bl	8005100 <_fflush_r>
 8004672:	b9e0      	cbnz	r0, 80046ae <__swbuf_r+0x74>
 8004674:	68a3      	ldr	r3, [r4, #8]
 8004676:	3b01      	subs	r3, #1
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	6022      	str	r2, [r4, #0]
 8004680:	701e      	strb	r6, [r3, #0]
 8004682:	6962      	ldr	r2, [r4, #20]
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	429a      	cmp	r2, r3
 8004688:	d004      	beq.n	8004694 <__swbuf_r+0x5a>
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	07db      	lsls	r3, r3, #31
 800468e:	d506      	bpl.n	800469e <__swbuf_r+0x64>
 8004690:	2e0a      	cmp	r6, #10
 8004692:	d104      	bne.n	800469e <__swbuf_r+0x64>
 8004694:	4621      	mov	r1, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fd32 	bl	8005100 <_fflush_r>
 800469c:	b938      	cbnz	r0, 80046ae <__swbuf_r+0x74>
 800469e:	4638      	mov	r0, r7
 80046a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f805 	bl	80046b4 <__swsetup_r>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0d5      	beq.n	800465a <__swbuf_r+0x20>
 80046ae:	f04f 37ff 	mov.w	r7, #4294967295
 80046b2:	e7f4      	b.n	800469e <__swbuf_r+0x64>

080046b4 <__swsetup_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <__swsetup_r+0xac>)
 80046b8:	4605      	mov	r5, r0
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	460c      	mov	r4, r1
 80046be:	b118      	cbz	r0, 80046c8 <__swsetup_r+0x14>
 80046c0:	6a03      	ldr	r3, [r0, #32]
 80046c2:	b90b      	cbnz	r3, 80046c8 <__swsetup_r+0x14>
 80046c4:	f7ff fed2 	bl	800446c <__sinit>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ce:	0718      	lsls	r0, r3, #28
 80046d0:	d422      	bmi.n	8004718 <__swsetup_r+0x64>
 80046d2:	06d9      	lsls	r1, r3, #27
 80046d4:	d407      	bmi.n	80046e6 <__swsetup_r+0x32>
 80046d6:	2309      	movs	r3, #9
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e034      	b.n	8004750 <__swsetup_r+0x9c>
 80046e6:	0758      	lsls	r0, r3, #29
 80046e8:	d512      	bpl.n	8004710 <__swsetup_r+0x5c>
 80046ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ec:	b141      	cbz	r1, 8004700 <__swsetup_r+0x4c>
 80046ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d002      	beq.n	80046fc <__swsetup_r+0x48>
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f8b0 	bl	800485c <_free_r>
 80046fc:	2300      	movs	r3, #0
 80046fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	2300      	movs	r3, #0
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	6923      	ldr	r3, [r4, #16]
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	f043 0308 	orr.w	r3, r3, #8
 8004716:	81a3      	strh	r3, [r4, #12]
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	b94b      	cbnz	r3, 8004730 <__swsetup_r+0x7c>
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004726:	d003      	beq.n	8004730 <__swsetup_r+0x7c>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fd36 	bl	800519c <__smakebuf_r>
 8004730:	89a0      	ldrh	r0, [r4, #12]
 8004732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004736:	f010 0301 	ands.w	r3, r0, #1
 800473a:	d00a      	beq.n	8004752 <__swsetup_r+0x9e>
 800473c:	2300      	movs	r3, #0
 800473e:	60a3      	str	r3, [r4, #8]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	425b      	negs	r3, r3
 8004744:	61a3      	str	r3, [r4, #24]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b943      	cbnz	r3, 800475c <__swsetup_r+0xa8>
 800474a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800474e:	d1c4      	bne.n	80046da <__swsetup_r+0x26>
 8004750:	bd38      	pop	{r3, r4, r5, pc}
 8004752:	0781      	lsls	r1, r0, #30
 8004754:	bf58      	it	pl
 8004756:	6963      	ldrpl	r3, [r4, #20]
 8004758:	60a3      	str	r3, [r4, #8]
 800475a:	e7f4      	b.n	8004746 <__swsetup_r+0x92>
 800475c:	2000      	movs	r0, #0
 800475e:	e7f7      	b.n	8004750 <__swsetup_r+0x9c>
 8004760:	20000064 	.word	0x20000064

08004764 <memset>:
 8004764:	4402      	add	r2, r0
 8004766:	4603      	mov	r3, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <_close_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d06      	ldr	r5, [pc, #24]	; (8004790 <_close_r+0x1c>)
 8004778:	2300      	movs	r3, #0
 800477a:	4604      	mov	r4, r0
 800477c:	4608      	mov	r0, r1
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	f7fc fc3f 	bl	8001002 <_close>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_close_r+0x1a>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_close_r+0x1a>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	2000033c 	.word	0x2000033c

08004794 <_lseek_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	; (80047b4 <_lseek_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc fc54 	bl	8001050 <_lseek>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_lseek_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_lseek_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	2000033c 	.word	0x2000033c

080047b8 <_read_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d07      	ldr	r5, [pc, #28]	; (80047d8 <_read_r+0x20>)
 80047bc:	4604      	mov	r4, r0
 80047be:	4608      	mov	r0, r1
 80047c0:	4611      	mov	r1, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	602a      	str	r2, [r5, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f7fc fbe2 	bl	8000f90 <_read>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_read_r+0x1e>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_read_r+0x1e>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	2000033c 	.word	0x2000033c

080047dc <_write_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d07      	ldr	r5, [pc, #28]	; (80047fc <_write_r+0x20>)
 80047e0:	4604      	mov	r4, r0
 80047e2:	4608      	mov	r0, r1
 80047e4:	4611      	mov	r1, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	602a      	str	r2, [r5, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7fc fbed 	bl	8000fca <_write>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_write_r+0x1e>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_write_r+0x1e>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	2000033c 	.word	0x2000033c

08004800 <__errno>:
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <__errno+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000064 	.word	0x20000064

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4d0d      	ldr	r5, [pc, #52]	; (8004844 <__libc_init_array+0x38>)
 8004810:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004812:	1b64      	subs	r4, r4, r5
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	2600      	movs	r6, #0
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	4d0b      	ldr	r5, [pc, #44]	; (800484c <__libc_init_array+0x40>)
 800481e:	4c0c      	ldr	r4, [pc, #48]	; (8004850 <__libc_init_array+0x44>)
 8004820:	f000 fd2a 	bl	8005278 <_init>
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	2600      	movs	r6, #0
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	08005350 	.word	0x08005350
 8004848:	08005350 	.word	0x08005350
 800484c:	08005350 	.word	0x08005350
 8004850:	08005354 	.word	0x08005354

08004854 <__retarget_lock_init_recursive>:
 8004854:	4770      	bx	lr

08004856 <__retarget_lock_acquire_recursive>:
 8004856:	4770      	bx	lr

08004858 <__retarget_lock_release_recursive>:
 8004858:	4770      	bx	lr
	...

0800485c <_free_r>:
 800485c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800485e:	2900      	cmp	r1, #0
 8004860:	d044      	beq.n	80048ec <_free_r+0x90>
 8004862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004866:	9001      	str	r0, [sp, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f1a1 0404 	sub.w	r4, r1, #4
 800486e:	bfb8      	it	lt
 8004870:	18e4      	addlt	r4, r4, r3
 8004872:	f000 f8df 	bl	8004a34 <__malloc_lock>
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <_free_r+0x94>)
 8004878:	9801      	ldr	r0, [sp, #4]
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	b933      	cbnz	r3, 800488c <_free_r+0x30>
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	b003      	add	sp, #12
 8004884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004888:	f000 b8da 	b.w	8004a40 <__malloc_unlock>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d908      	bls.n	80048a2 <_free_r+0x46>
 8004890:	6825      	ldr	r5, [r4, #0]
 8004892:	1961      	adds	r1, r4, r5
 8004894:	428b      	cmp	r3, r1
 8004896:	bf01      	itttt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	1949      	addeq	r1, r1, r5
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	e7ed      	b.n	800487e <_free_r+0x22>
 80048a2:	461a      	mov	r2, r3
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b10b      	cbz	r3, 80048ac <_free_r+0x50>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x46>
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	1855      	adds	r5, r2, r1
 80048b0:	42a5      	cmp	r5, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x70>
 80048b4:	6824      	ldr	r4, [r4, #0]
 80048b6:	4421      	add	r1, r4
 80048b8:	1854      	adds	r4, r2, r1
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	d1e0      	bne.n	8004882 <_free_r+0x26>
 80048c0:	681c      	ldr	r4, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6053      	str	r3, [r2, #4]
 80048c6:	440c      	add	r4, r1
 80048c8:	6014      	str	r4, [r2, #0]
 80048ca:	e7da      	b.n	8004882 <_free_r+0x26>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x78>
 80048ce:	230c      	movs	r3, #12
 80048d0:	6003      	str	r3, [r0, #0]
 80048d2:	e7d6      	b.n	8004882 <_free_r+0x26>
 80048d4:	6825      	ldr	r5, [r4, #0]
 80048d6:	1961      	adds	r1, r4, r5
 80048d8:	428b      	cmp	r3, r1
 80048da:	bf04      	itt	eq
 80048dc:	6819      	ldreq	r1, [r3, #0]
 80048de:	685b      	ldreq	r3, [r3, #4]
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	bf04      	itt	eq
 80048e4:	1949      	addeq	r1, r1, r5
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	6054      	str	r4, [r2, #4]
 80048ea:	e7ca      	b.n	8004882 <_free_r+0x26>
 80048ec:	b003      	add	sp, #12
 80048ee:	bd30      	pop	{r4, r5, pc}
 80048f0:	20000344 	.word	0x20000344

080048f4 <sbrk_aligned>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4e0e      	ldr	r6, [pc, #56]	; (8004930 <sbrk_aligned+0x3c>)
 80048f8:	460c      	mov	r4, r1
 80048fa:	6831      	ldr	r1, [r6, #0]
 80048fc:	4605      	mov	r5, r0
 80048fe:	b911      	cbnz	r1, 8004906 <sbrk_aligned+0x12>
 8004900:	f000 fcaa 	bl	8005258 <_sbrk_r>
 8004904:	6030      	str	r0, [r6, #0]
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f000 fca5 	bl	8005258 <_sbrk_r>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d00a      	beq.n	8004928 <sbrk_aligned+0x34>
 8004912:	1cc4      	adds	r4, r0, #3
 8004914:	f024 0403 	bic.w	r4, r4, #3
 8004918:	42a0      	cmp	r0, r4
 800491a:	d007      	beq.n	800492c <sbrk_aligned+0x38>
 800491c:	1a21      	subs	r1, r4, r0
 800491e:	4628      	mov	r0, r5
 8004920:	f000 fc9a 	bl	8005258 <_sbrk_r>
 8004924:	3001      	adds	r0, #1
 8004926:	d101      	bne.n	800492c <sbrk_aligned+0x38>
 8004928:	f04f 34ff 	mov.w	r4, #4294967295
 800492c:	4620      	mov	r0, r4
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	20000348 	.word	0x20000348

08004934 <_malloc_r>:
 8004934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004938:	1ccd      	adds	r5, r1, #3
 800493a:	f025 0503 	bic.w	r5, r5, #3
 800493e:	3508      	adds	r5, #8
 8004940:	2d0c      	cmp	r5, #12
 8004942:	bf38      	it	cc
 8004944:	250c      	movcc	r5, #12
 8004946:	2d00      	cmp	r5, #0
 8004948:	4607      	mov	r7, r0
 800494a:	db01      	blt.n	8004950 <_malloc_r+0x1c>
 800494c:	42a9      	cmp	r1, r5
 800494e:	d905      	bls.n	800495c <_malloc_r+0x28>
 8004950:	230c      	movs	r3, #12
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	2600      	movs	r6, #0
 8004956:	4630      	mov	r0, r6
 8004958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a30 <_malloc_r+0xfc>
 8004960:	f000 f868 	bl	8004a34 <__malloc_lock>
 8004964:	f8d8 3000 	ldr.w	r3, [r8]
 8004968:	461c      	mov	r4, r3
 800496a:	bb5c      	cbnz	r4, 80049c4 <_malloc_r+0x90>
 800496c:	4629      	mov	r1, r5
 800496e:	4638      	mov	r0, r7
 8004970:	f7ff ffc0 	bl	80048f4 <sbrk_aligned>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	4604      	mov	r4, r0
 8004978:	d155      	bne.n	8004a26 <_malloc_r+0xf2>
 800497a:	f8d8 4000 	ldr.w	r4, [r8]
 800497e:	4626      	mov	r6, r4
 8004980:	2e00      	cmp	r6, #0
 8004982:	d145      	bne.n	8004a10 <_malloc_r+0xdc>
 8004984:	2c00      	cmp	r4, #0
 8004986:	d048      	beq.n	8004a1a <_malloc_r+0xe6>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	4631      	mov	r1, r6
 800498c:	4638      	mov	r0, r7
 800498e:	eb04 0903 	add.w	r9, r4, r3
 8004992:	f000 fc61 	bl	8005258 <_sbrk_r>
 8004996:	4581      	cmp	r9, r0
 8004998:	d13f      	bne.n	8004a1a <_malloc_r+0xe6>
 800499a:	6821      	ldr	r1, [r4, #0]
 800499c:	1a6d      	subs	r5, r5, r1
 800499e:	4629      	mov	r1, r5
 80049a0:	4638      	mov	r0, r7
 80049a2:	f7ff ffa7 	bl	80048f4 <sbrk_aligned>
 80049a6:	3001      	adds	r0, #1
 80049a8:	d037      	beq.n	8004a1a <_malloc_r+0xe6>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	442b      	add	r3, r5
 80049ae:	6023      	str	r3, [r4, #0]
 80049b0:	f8d8 3000 	ldr.w	r3, [r8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d038      	beq.n	8004a2a <_malloc_r+0xf6>
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	42a2      	cmp	r2, r4
 80049bc:	d12b      	bne.n	8004a16 <_malloc_r+0xe2>
 80049be:	2200      	movs	r2, #0
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e00f      	b.n	80049e4 <_malloc_r+0xb0>
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	1b52      	subs	r2, r2, r5
 80049c8:	d41f      	bmi.n	8004a0a <_malloc_r+0xd6>
 80049ca:	2a0b      	cmp	r2, #11
 80049cc:	d917      	bls.n	80049fe <_malloc_r+0xca>
 80049ce:	1961      	adds	r1, r4, r5
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	bf18      	it	ne
 80049d6:	6059      	strne	r1, [r3, #4]
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	bf08      	it	eq
 80049dc:	f8c8 1000 	streq.w	r1, [r8]
 80049e0:	5162      	str	r2, [r4, r5]
 80049e2:	604b      	str	r3, [r1, #4]
 80049e4:	4638      	mov	r0, r7
 80049e6:	f104 060b 	add.w	r6, r4, #11
 80049ea:	f000 f829 	bl	8004a40 <__malloc_unlock>
 80049ee:	f026 0607 	bic.w	r6, r6, #7
 80049f2:	1d23      	adds	r3, r4, #4
 80049f4:	1af2      	subs	r2, r6, r3
 80049f6:	d0ae      	beq.n	8004956 <_malloc_r+0x22>
 80049f8:	1b9b      	subs	r3, r3, r6
 80049fa:	50a3      	str	r3, [r4, r2]
 80049fc:	e7ab      	b.n	8004956 <_malloc_r+0x22>
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	6862      	ldr	r2, [r4, #4]
 8004a02:	d1dd      	bne.n	80049c0 <_malloc_r+0x8c>
 8004a04:	f8c8 2000 	str.w	r2, [r8]
 8004a08:	e7ec      	b.n	80049e4 <_malloc_r+0xb0>
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	6864      	ldr	r4, [r4, #4]
 8004a0e:	e7ac      	b.n	800496a <_malloc_r+0x36>
 8004a10:	4634      	mov	r4, r6
 8004a12:	6876      	ldr	r6, [r6, #4]
 8004a14:	e7b4      	b.n	8004980 <_malloc_r+0x4c>
 8004a16:	4613      	mov	r3, r2
 8004a18:	e7cc      	b.n	80049b4 <_malloc_r+0x80>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4638      	mov	r0, r7
 8004a20:	f000 f80e 	bl	8004a40 <__malloc_unlock>
 8004a24:	e797      	b.n	8004956 <_malloc_r+0x22>
 8004a26:	6025      	str	r5, [r4, #0]
 8004a28:	e7dc      	b.n	80049e4 <_malloc_r+0xb0>
 8004a2a:	605b      	str	r3, [r3, #4]
 8004a2c:	deff      	udf	#255	; 0xff
 8004a2e:	bf00      	nop
 8004a30:	20000344 	.word	0x20000344

08004a34 <__malloc_lock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_lock+0x8>)
 8004a36:	f7ff bf0e 	b.w	8004856 <__retarget_lock_acquire_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	20000340 	.word	0x20000340

08004a40 <__malloc_unlock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__malloc_unlock+0x8>)
 8004a42:	f7ff bf09 	b.w	8004858 <__retarget_lock_release_recursive>
 8004a46:	bf00      	nop
 8004a48:	20000340 	.word	0x20000340

08004a4c <__sfputc_r>:
 8004a4c:	6893      	ldr	r3, [r2, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	b410      	push	{r4}
 8004a54:	6093      	str	r3, [r2, #8]
 8004a56:	da08      	bge.n	8004a6a <__sfputc_r+0x1e>
 8004a58:	6994      	ldr	r4, [r2, #24]
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	db01      	blt.n	8004a62 <__sfputc_r+0x16>
 8004a5e:	290a      	cmp	r1, #10
 8004a60:	d103      	bne.n	8004a6a <__sfputc_r+0x1e>
 8004a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a66:	f7ff bde8 	b.w	800463a <__swbuf_r>
 8004a6a:	6813      	ldr	r3, [r2, #0]
 8004a6c:	1c58      	adds	r0, r3, #1
 8004a6e:	6010      	str	r0, [r2, #0]
 8004a70:	7019      	strb	r1, [r3, #0]
 8004a72:	4608      	mov	r0, r1
 8004a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <__sfputs_r>:
 8004a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	4614      	mov	r4, r2
 8004a82:	18d5      	adds	r5, r2, r3
 8004a84:	42ac      	cmp	r4, r5
 8004a86:	d101      	bne.n	8004a8c <__sfputs_r+0x12>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e007      	b.n	8004a9c <__sfputs_r+0x22>
 8004a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a90:	463a      	mov	r2, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7ff ffda 	bl	8004a4c <__sfputc_r>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d1f3      	bne.n	8004a84 <__sfputs_r+0xa>
 8004a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aa0 <_vfiprintf_r>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	b09d      	sub	sp, #116	; 0x74
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	4698      	mov	r8, r3
 8004aac:	4606      	mov	r6, r0
 8004aae:	b118      	cbz	r0, 8004ab8 <_vfiprintf_r+0x18>
 8004ab0:	6a03      	ldr	r3, [r0, #32]
 8004ab2:	b90b      	cbnz	r3, 8004ab8 <_vfiprintf_r+0x18>
 8004ab4:	f7ff fcda 	bl	800446c <__sinit>
 8004ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aba:	07d9      	lsls	r1, r3, #31
 8004abc:	d405      	bmi.n	8004aca <_vfiprintf_r+0x2a>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	059a      	lsls	r2, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_vfiprintf_r+0x2a>
 8004ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ac6:	f7ff fec6 	bl	8004856 <__retarget_lock_acquire_recursive>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	d501      	bpl.n	8004ad4 <_vfiprintf_r+0x34>
 8004ad0:	692b      	ldr	r3, [r5, #16]
 8004ad2:	b99b      	cbnz	r3, 8004afc <_vfiprintf_r+0x5c>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f7ff fdec 	bl	80046b4 <__swsetup_r>
 8004adc:	b170      	cbz	r0, 8004afc <_vfiprintf_r+0x5c>
 8004ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ae0:	07dc      	lsls	r4, r3, #31
 8004ae2:	d504      	bpl.n	8004aee <_vfiprintf_r+0x4e>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	b01d      	add	sp, #116	; 0x74
 8004aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aee:	89ab      	ldrh	r3, [r5, #12]
 8004af0:	0598      	lsls	r0, r3, #22
 8004af2:	d4f7      	bmi.n	8004ae4 <_vfiprintf_r+0x44>
 8004af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af6:	f7ff feaf 	bl	8004858 <__retarget_lock_release_recursive>
 8004afa:	e7f3      	b.n	8004ae4 <_vfiprintf_r+0x44>
 8004afc:	2300      	movs	r3, #0
 8004afe:	9309      	str	r3, [sp, #36]	; 0x24
 8004b00:	2320      	movs	r3, #32
 8004b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b0a:	2330      	movs	r3, #48	; 0x30
 8004b0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004cc0 <_vfiprintf_r+0x220>
 8004b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b14:	f04f 0901 	mov.w	r9, #1
 8004b18:	4623      	mov	r3, r4
 8004b1a:	469a      	mov	sl, r3
 8004b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b20:	b10a      	cbz	r2, 8004b26 <_vfiprintf_r+0x86>
 8004b22:	2a25      	cmp	r2, #37	; 0x25
 8004b24:	d1f9      	bne.n	8004b1a <_vfiprintf_r+0x7a>
 8004b26:	ebba 0b04 	subs.w	fp, sl, r4
 8004b2a:	d00b      	beq.n	8004b44 <_vfiprintf_r+0xa4>
 8004b2c:	465b      	mov	r3, fp
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff ffa1 	bl	8004a7a <__sfputs_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f000 80a9 	beq.w	8004c90 <_vfiprintf_r+0x1f0>
 8004b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b40:	445a      	add	r2, fp
 8004b42:	9209      	str	r2, [sp, #36]	; 0x24
 8004b44:	f89a 3000 	ldrb.w	r3, [sl]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80a1 	beq.w	8004c90 <_vfiprintf_r+0x1f0>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f04f 32ff 	mov.w	r2, #4294967295
 8004b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b58:	f10a 0a01 	add.w	sl, sl, #1
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	9307      	str	r3, [sp, #28]
 8004b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b64:	931a      	str	r3, [sp, #104]	; 0x68
 8004b66:	4654      	mov	r4, sl
 8004b68:	2205      	movs	r2, #5
 8004b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6e:	4854      	ldr	r0, [pc, #336]	; (8004cc0 <_vfiprintf_r+0x220>)
 8004b70:	f7fb fb2e 	bl	80001d0 <memchr>
 8004b74:	9a04      	ldr	r2, [sp, #16]
 8004b76:	b9d8      	cbnz	r0, 8004bb0 <_vfiprintf_r+0x110>
 8004b78:	06d1      	lsls	r1, r2, #27
 8004b7a:	bf44      	itt	mi
 8004b7c:	2320      	movmi	r3, #32
 8004b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b82:	0713      	lsls	r3, r2, #28
 8004b84:	bf44      	itt	mi
 8004b86:	232b      	movmi	r3, #43	; 0x2b
 8004b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b90:	2b2a      	cmp	r3, #42	; 0x2a
 8004b92:	d015      	beq.n	8004bc0 <_vfiprintf_r+0x120>
 8004b94:	9a07      	ldr	r2, [sp, #28]
 8004b96:	4654      	mov	r4, sl
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f04f 0c0a 	mov.w	ip, #10
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ba4:	3b30      	subs	r3, #48	; 0x30
 8004ba6:	2b09      	cmp	r3, #9
 8004ba8:	d94d      	bls.n	8004c46 <_vfiprintf_r+0x1a6>
 8004baa:	b1b0      	cbz	r0, 8004bda <_vfiprintf_r+0x13a>
 8004bac:	9207      	str	r2, [sp, #28]
 8004bae:	e014      	b.n	8004bda <_vfiprintf_r+0x13a>
 8004bb0:	eba0 0308 	sub.w	r3, r0, r8
 8004bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	46a2      	mov	sl, r4
 8004bbe:	e7d2      	b.n	8004b66 <_vfiprintf_r+0xc6>
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	1d19      	adds	r1, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	9103      	str	r1, [sp, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfbb      	ittet	lt
 8004bcc:	425b      	neglt	r3, r3
 8004bce:	f042 0202 	orrlt.w	r2, r2, #2
 8004bd2:	9307      	strge	r3, [sp, #28]
 8004bd4:	9307      	strlt	r3, [sp, #28]
 8004bd6:	bfb8      	it	lt
 8004bd8:	9204      	strlt	r2, [sp, #16]
 8004bda:	7823      	ldrb	r3, [r4, #0]
 8004bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bde:	d10c      	bne.n	8004bfa <_vfiprintf_r+0x15a>
 8004be0:	7863      	ldrb	r3, [r4, #1]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d134      	bne.n	8004c50 <_vfiprintf_r+0x1b0>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	1d1a      	adds	r2, r3, #4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	9203      	str	r2, [sp, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bfb8      	it	lt
 8004bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bf6:	3402      	adds	r4, #2
 8004bf8:	9305      	str	r3, [sp, #20]
 8004bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004cd0 <_vfiprintf_r+0x230>
 8004bfe:	7821      	ldrb	r1, [r4, #0]
 8004c00:	2203      	movs	r2, #3
 8004c02:	4650      	mov	r0, sl
 8004c04:	f7fb fae4 	bl	80001d0 <memchr>
 8004c08:	b138      	cbz	r0, 8004c1a <_vfiprintf_r+0x17a>
 8004c0a:	9b04      	ldr	r3, [sp, #16]
 8004c0c:	eba0 000a 	sub.w	r0, r0, sl
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	4082      	lsls	r2, r0
 8004c14:	4313      	orrs	r3, r2
 8004c16:	3401      	adds	r4, #1
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1e:	4829      	ldr	r0, [pc, #164]	; (8004cc4 <_vfiprintf_r+0x224>)
 8004c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c24:	2206      	movs	r2, #6
 8004c26:	f7fb fad3 	bl	80001d0 <memchr>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d03f      	beq.n	8004cae <_vfiprintf_r+0x20e>
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <_vfiprintf_r+0x228>)
 8004c30:	bb1b      	cbnz	r3, 8004c7a <_vfiprintf_r+0x1da>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	3307      	adds	r3, #7
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	9303      	str	r3, [sp, #12]
 8004c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c40:	443b      	add	r3, r7
 8004c42:	9309      	str	r3, [sp, #36]	; 0x24
 8004c44:	e768      	b.n	8004b18 <_vfiprintf_r+0x78>
 8004c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e7a6      	b.n	8004b9e <_vfiprintf_r+0xfe>
 8004c50:	2300      	movs	r3, #0
 8004c52:	3401      	adds	r4, #1
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 0c0a 	mov.w	ip, #10
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c62:	3a30      	subs	r2, #48	; 0x30
 8004c64:	2a09      	cmp	r2, #9
 8004c66:	d903      	bls.n	8004c70 <_vfiprintf_r+0x1d0>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0c6      	beq.n	8004bfa <_vfiprintf_r+0x15a>
 8004c6c:	9105      	str	r1, [sp, #20]
 8004c6e:	e7c4      	b.n	8004bfa <_vfiprintf_r+0x15a>
 8004c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c74:	4604      	mov	r4, r0
 8004c76:	2301      	movs	r3, #1
 8004c78:	e7f0      	b.n	8004c5c <_vfiprintf_r+0x1bc>
 8004c7a:	ab03      	add	r3, sp, #12
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <_vfiprintf_r+0x22c>)
 8004c82:	a904      	add	r1, sp, #16
 8004c84:	4630      	mov	r0, r6
 8004c86:	f3af 8000 	nop.w
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	1c78      	adds	r0, r7, #1
 8004c8e:	d1d6      	bne.n	8004c3e <_vfiprintf_r+0x19e>
 8004c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	d405      	bmi.n	8004ca2 <_vfiprintf_r+0x202>
 8004c96:	89ab      	ldrh	r3, [r5, #12]
 8004c98:	059a      	lsls	r2, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_vfiprintf_r+0x202>
 8004c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c9e:	f7ff fddb 	bl	8004858 <__retarget_lock_release_recursive>
 8004ca2:	89ab      	ldrh	r3, [r5, #12]
 8004ca4:	065b      	lsls	r3, r3, #25
 8004ca6:	f53f af1d 	bmi.w	8004ae4 <_vfiprintf_r+0x44>
 8004caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cac:	e71c      	b.n	8004ae8 <_vfiprintf_r+0x48>
 8004cae:	ab03      	add	r3, sp, #12
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	462a      	mov	r2, r5
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <_vfiprintf_r+0x22c>)
 8004cb6:	a904      	add	r1, sp, #16
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f879 	bl	8004db0 <_printf_i>
 8004cbe:	e7e4      	b.n	8004c8a <_vfiprintf_r+0x1ea>
 8004cc0:	08005314 	.word	0x08005314
 8004cc4:	0800531e 	.word	0x0800531e
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a7b 	.word	0x08004a7b
 8004cd0:	0800531a 	.word	0x0800531a

08004cd4 <_printf_common>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	4616      	mov	r6, r2
 8004cda:	4699      	mov	r9, r3
 8004cdc:	688a      	ldr	r2, [r1, #8]
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bfb8      	it	lt
 8004ce8:	4613      	movlt	r3, r2
 8004cea:	6033      	str	r3, [r6, #0]
 8004cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	b10a      	cbz	r2, 8004cfa <_printf_common+0x26>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	0699      	lsls	r1, r3, #26
 8004cfe:	bf42      	ittt	mi
 8004d00:	6833      	ldrmi	r3, [r6, #0]
 8004d02:	3302      	addmi	r3, #2
 8004d04:	6033      	strmi	r3, [r6, #0]
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	f015 0506 	ands.w	r5, r5, #6
 8004d0c:	d106      	bne.n	8004d1c <_printf_common+0x48>
 8004d0e:	f104 0a19 	add.w	sl, r4, #25
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	6832      	ldr	r2, [r6, #0]
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	dc26      	bgt.n	8004d6a <_printf_common+0x96>
 8004d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d20:	1e13      	subs	r3, r2, #0
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	0692      	lsls	r2, r2, #26
 8004d2a:	d42b      	bmi.n	8004d84 <_printf_common+0xb0>
 8004d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d01e      	beq.n	8004d78 <_printf_common+0xa4>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	6922      	ldr	r2, [r4, #16]
 8004d3e:	f003 0306 	and.w	r3, r3, #6
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	bf02      	ittt	eq
 8004d46:	68e5      	ldreq	r5, [r4, #12]
 8004d48:	6833      	ldreq	r3, [r6, #0]
 8004d4a:	1aed      	subeq	r5, r5, r3
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	bf0c      	ite	eq
 8004d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d54:	2500      	movne	r5, #0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bfc4      	itt	gt
 8004d5a:	1a9b      	subgt	r3, r3, r2
 8004d5c:	18ed      	addgt	r5, r5, r3
 8004d5e:	2600      	movs	r6, #0
 8004d60:	341a      	adds	r4, #26
 8004d62:	42b5      	cmp	r5, r6
 8004d64:	d11a      	bne.n	8004d9c <_printf_common+0xc8>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e008      	b.n	8004d7c <_printf_common+0xa8>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4638      	mov	r0, r7
 8004d72:	47c0      	blx	r8
 8004d74:	3001      	adds	r0, #1
 8004d76:	d103      	bne.n	8004d80 <_printf_common+0xac>
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7c6      	b.n	8004d12 <_printf_common+0x3e>
 8004d84:	18e1      	adds	r1, r4, r3
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d8e:	4422      	add	r2, r4
 8004d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d98:	3302      	adds	r3, #2
 8004d9a:	e7c7      	b.n	8004d2c <_printf_common+0x58>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4622      	mov	r2, r4
 8004da0:	4649      	mov	r1, r9
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0e6      	beq.n	8004d78 <_printf_common+0xa4>
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7d9      	b.n	8004d62 <_printf_common+0x8e>
	...

08004db0 <_printf_i>:
 8004db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	7e0f      	ldrb	r7, [r1, #24]
 8004db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004db8:	2f78      	cmp	r7, #120	; 0x78
 8004dba:	4691      	mov	r9, r2
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dc6:	d807      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dc8:	2f62      	cmp	r7, #98	; 0x62
 8004dca:	d80a      	bhi.n	8004de2 <_printf_i+0x32>
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	f000 80d4 	beq.w	8004f7a <_printf_i+0x1ca>
 8004dd2:	2f58      	cmp	r7, #88	; 0x58
 8004dd4:	f000 80c0 	beq.w	8004f58 <_printf_i+0x1a8>
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de0:	e03a      	b.n	8004e58 <_printf_i+0xa8>
 8004de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004de6:	2b15      	cmp	r3, #21
 8004de8:	d8f6      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dea:	a101      	add	r1, pc, #4	; (adr r1, 8004df0 <_printf_i+0x40>)
 8004dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df0:	08004e49 	.word	0x08004e49
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004dd9 	.word	0x08004dd9
 8004dfc:	08004dd9 	.word	0x08004dd9
 8004e00:	08004dd9 	.word	0x08004dd9
 8004e04:	08004dd9 	.word	0x08004dd9
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004dd9 	.word	0x08004dd9
 8004e10:	08004dd9 	.word	0x08004dd9
 8004e14:	08004dd9 	.word	0x08004dd9
 8004e18:	08004dd9 	.word	0x08004dd9
 8004e1c:	08004f61 	.word	0x08004f61
 8004e20:	08004e89 	.word	0x08004e89
 8004e24:	08004f1b 	.word	0x08004f1b
 8004e28:	08004dd9 	.word	0x08004dd9
 8004e2c:	08004dd9 	.word	0x08004dd9
 8004e30:	08004f83 	.word	0x08004f83
 8004e34:	08004dd9 	.word	0x08004dd9
 8004e38:	08004e89 	.word	0x08004e89
 8004e3c:	08004dd9 	.word	0x08004dd9
 8004e40:	08004dd9 	.word	0x08004dd9
 8004e44:	08004f23 	.word	0x08004f23
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	1d1a      	adds	r2, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e09f      	b.n	8004f9c <_printf_i+0x1ec>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	0607      	lsls	r7, r0, #24
 8004e62:	f103 0104 	add.w	r1, r3, #4
 8004e66:	6029      	str	r1, [r5, #0]
 8004e68:	d501      	bpl.n	8004e6e <_printf_i+0xbe>
 8004e6a:	681e      	ldr	r6, [r3, #0]
 8004e6c:	e003      	b.n	8004e76 <_printf_i+0xc6>
 8004e6e:	0646      	lsls	r6, r0, #25
 8004e70:	d5fb      	bpl.n	8004e6a <_printf_i+0xba>
 8004e72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	da03      	bge.n	8004e82 <_printf_i+0xd2>
 8004e7a:	232d      	movs	r3, #45	; 0x2d
 8004e7c:	4276      	negs	r6, r6
 8004e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e82:	485a      	ldr	r0, [pc, #360]	; (8004fec <_printf_i+0x23c>)
 8004e84:	230a      	movs	r3, #10
 8004e86:	e012      	b.n	8004eae <_printf_i+0xfe>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	1d19      	adds	r1, r3, #4
 8004e8e:	6029      	str	r1, [r5, #0]
 8004e90:	0605      	lsls	r5, r0, #24
 8004e92:	d501      	bpl.n	8004e98 <_printf_i+0xe8>
 8004e94:	681e      	ldr	r6, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <_printf_i+0xee>
 8004e98:	0641      	lsls	r1, r0, #25
 8004e9a:	d5fb      	bpl.n	8004e94 <_printf_i+0xe4>
 8004e9c:	881e      	ldrh	r6, [r3, #0]
 8004e9e:	4853      	ldr	r0, [pc, #332]	; (8004fec <_printf_i+0x23c>)
 8004ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2308      	moveq	r3, #8
 8004ea6:	230a      	movne	r3, #10
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eae:	6865      	ldr	r5, [r4, #4]
 8004eb0:	60a5      	str	r5, [r4, #8]
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	bfa2      	ittt	ge
 8004eb6:	6821      	ldrge	r1, [r4, #0]
 8004eb8:	f021 0104 	bicge.w	r1, r1, #4
 8004ebc:	6021      	strge	r1, [r4, #0]
 8004ebe:	b90e      	cbnz	r6, 8004ec4 <_printf_i+0x114>
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	d04b      	beq.n	8004f5c <_printf_i+0x1ac>
 8004ec4:	4615      	mov	r5, r2
 8004ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eca:	fb03 6711 	mls	r7, r3, r1, r6
 8004ece:	5dc7      	ldrb	r7, [r0, r7]
 8004ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ed4:	4637      	mov	r7, r6
 8004ed6:	42bb      	cmp	r3, r7
 8004ed8:	460e      	mov	r6, r1
 8004eda:	d9f4      	bls.n	8004ec6 <_printf_i+0x116>
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d10b      	bne.n	8004ef8 <_printf_i+0x148>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07de      	lsls	r6, r3, #31
 8004ee4:	d508      	bpl.n	8004ef8 <_printf_i+0x148>
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	6861      	ldr	r1, [r4, #4]
 8004eea:	4299      	cmp	r1, r3
 8004eec:	bfde      	ittt	le
 8004eee:	2330      	movle	r3, #48	; 0x30
 8004ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ef8:	1b52      	subs	r2, r2, r5
 8004efa:	6122      	str	r2, [r4, #16]
 8004efc:	f8cd a000 	str.w	sl, [sp]
 8004f00:	464b      	mov	r3, r9
 8004f02:	aa03      	add	r2, sp, #12
 8004f04:	4621      	mov	r1, r4
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7ff fee4 	bl	8004cd4 <_printf_common>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d14a      	bne.n	8004fa6 <_printf_i+0x1f6>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	b004      	add	sp, #16
 8004f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	4833      	ldr	r0, [pc, #204]	; (8004ff0 <_printf_i+0x240>)
 8004f24:	2778      	movs	r7, #120	; 0x78
 8004f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	6829      	ldr	r1, [r5, #0]
 8004f2e:	061f      	lsls	r7, r3, #24
 8004f30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f34:	d402      	bmi.n	8004f3c <_printf_i+0x18c>
 8004f36:	065f      	lsls	r7, r3, #25
 8004f38:	bf48      	it	mi
 8004f3a:	b2b6      	uxthmi	r6, r6
 8004f3c:	07df      	lsls	r7, r3, #31
 8004f3e:	bf48      	it	mi
 8004f40:	f043 0320 	orrmi.w	r3, r3, #32
 8004f44:	6029      	str	r1, [r5, #0]
 8004f46:	bf48      	it	mi
 8004f48:	6023      	strmi	r3, [r4, #0]
 8004f4a:	b91e      	cbnz	r6, 8004f54 <_printf_i+0x1a4>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	f023 0320 	bic.w	r3, r3, #32
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	2310      	movs	r3, #16
 8004f56:	e7a7      	b.n	8004ea8 <_printf_i+0xf8>
 8004f58:	4824      	ldr	r0, [pc, #144]	; (8004fec <_printf_i+0x23c>)
 8004f5a:	e7e4      	b.n	8004f26 <_printf_i+0x176>
 8004f5c:	4615      	mov	r5, r2
 8004f5e:	e7bd      	b.n	8004edc <_printf_i+0x12c>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	6826      	ldr	r6, [r4, #0]
 8004f64:	6961      	ldr	r1, [r4, #20]
 8004f66:	1d18      	adds	r0, r3, #4
 8004f68:	6028      	str	r0, [r5, #0]
 8004f6a:	0635      	lsls	r5, r6, #24
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	d501      	bpl.n	8004f74 <_printf_i+0x1c4>
 8004f70:	6019      	str	r1, [r3, #0]
 8004f72:	e002      	b.n	8004f7a <_printf_i+0x1ca>
 8004f74:	0670      	lsls	r0, r6, #25
 8004f76:	d5fb      	bpl.n	8004f70 <_printf_i+0x1c0>
 8004f78:	8019      	strh	r1, [r3, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	4615      	mov	r5, r2
 8004f80:	e7bc      	b.n	8004efc <_printf_i+0x14c>
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	1d1a      	adds	r2, r3, #4
 8004f86:	602a      	str	r2, [r5, #0]
 8004f88:	681d      	ldr	r5, [r3, #0]
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f7fb f91e 	bl	80001d0 <memchr>
 8004f94:	b108      	cbz	r0, 8004f9a <_printf_i+0x1ea>
 8004f96:	1b40      	subs	r0, r0, r5
 8004f98:	6060      	str	r0, [r4, #4]
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa4:	e7aa      	b.n	8004efc <_printf_i+0x14c>
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	47d0      	blx	sl
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d0ad      	beq.n	8004f10 <_printf_i+0x160>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	079b      	lsls	r3, r3, #30
 8004fb8:	d413      	bmi.n	8004fe2 <_printf_i+0x232>
 8004fba:	68e0      	ldr	r0, [r4, #12]
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	4298      	cmp	r0, r3
 8004fc0:	bfb8      	it	lt
 8004fc2:	4618      	movlt	r0, r3
 8004fc4:	e7a6      	b.n	8004f14 <_printf_i+0x164>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4632      	mov	r2, r6
 8004fca:	4649      	mov	r1, r9
 8004fcc:	4640      	mov	r0, r8
 8004fce:	47d0      	blx	sl
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d09d      	beq.n	8004f10 <_printf_i+0x160>
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	9903      	ldr	r1, [sp, #12]
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dcf2      	bgt.n	8004fc6 <_printf_i+0x216>
 8004fe0:	e7eb      	b.n	8004fba <_printf_i+0x20a>
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	f104 0619 	add.w	r6, r4, #25
 8004fe8:	e7f5      	b.n	8004fd6 <_printf_i+0x226>
 8004fea:	bf00      	nop
 8004fec:	08005325 	.word	0x08005325
 8004ff0:	08005336 	.word	0x08005336

08004ff4 <__sflush_r>:
 8004ff4:	898a      	ldrh	r2, [r1, #12]
 8004ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	0710      	lsls	r0, r2, #28
 8004ffe:	460c      	mov	r4, r1
 8005000:	d458      	bmi.n	80050b4 <__sflush_r+0xc0>
 8005002:	684b      	ldr	r3, [r1, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc05      	bgt.n	8005014 <__sflush_r+0x20>
 8005008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	dc02      	bgt.n	8005014 <__sflush_r+0x20>
 800500e:	2000      	movs	r0, #0
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005016:	2e00      	cmp	r6, #0
 8005018:	d0f9      	beq.n	800500e <__sflush_r+0x1a>
 800501a:	2300      	movs	r3, #0
 800501c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005020:	682f      	ldr	r7, [r5, #0]
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	d032      	beq.n	800508e <__sflush_r+0x9a>
 8005028:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	075a      	lsls	r2, r3, #29
 800502e:	d505      	bpl.n	800503c <__sflush_r+0x48>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	1ac0      	subs	r0, r0, r3
 8005034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005036:	b10b      	cbz	r3, 800503c <__sflush_r+0x48>
 8005038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503a:	1ac0      	subs	r0, r0, r3
 800503c:	2300      	movs	r3, #0
 800503e:	4602      	mov	r2, r0
 8005040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005042:	6a21      	ldr	r1, [r4, #32]
 8005044:	4628      	mov	r0, r5
 8005046:	47b0      	blx	r6
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	d106      	bne.n	800505c <__sflush_r+0x68>
 800504e:	6829      	ldr	r1, [r5, #0]
 8005050:	291d      	cmp	r1, #29
 8005052:	d82b      	bhi.n	80050ac <__sflush_r+0xb8>
 8005054:	4a29      	ldr	r2, [pc, #164]	; (80050fc <__sflush_r+0x108>)
 8005056:	410a      	asrs	r2, r1
 8005058:	07d6      	lsls	r6, r2, #31
 800505a:	d427      	bmi.n	80050ac <__sflush_r+0xb8>
 800505c:	2200      	movs	r2, #0
 800505e:	6062      	str	r2, [r4, #4]
 8005060:	04d9      	lsls	r1, r3, #19
 8005062:	6922      	ldr	r2, [r4, #16]
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	d504      	bpl.n	8005072 <__sflush_r+0x7e>
 8005068:	1c42      	adds	r2, r0, #1
 800506a:	d101      	bne.n	8005070 <__sflush_r+0x7c>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b903      	cbnz	r3, 8005072 <__sflush_r+0x7e>
 8005070:	6560      	str	r0, [r4, #84]	; 0x54
 8005072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005074:	602f      	str	r7, [r5, #0]
 8005076:	2900      	cmp	r1, #0
 8005078:	d0c9      	beq.n	800500e <__sflush_r+0x1a>
 800507a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800507e:	4299      	cmp	r1, r3
 8005080:	d002      	beq.n	8005088 <__sflush_r+0x94>
 8005082:	4628      	mov	r0, r5
 8005084:	f7ff fbea 	bl	800485c <_free_r>
 8005088:	2000      	movs	r0, #0
 800508a:	6360      	str	r0, [r4, #52]	; 0x34
 800508c:	e7c0      	b.n	8005010 <__sflush_r+0x1c>
 800508e:	2301      	movs	r3, #1
 8005090:	4628      	mov	r0, r5
 8005092:	47b0      	blx	r6
 8005094:	1c41      	adds	r1, r0, #1
 8005096:	d1c8      	bne.n	800502a <__sflush_r+0x36>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0c5      	beq.n	800502a <__sflush_r+0x36>
 800509e:	2b1d      	cmp	r3, #29
 80050a0:	d001      	beq.n	80050a6 <__sflush_r+0xb2>
 80050a2:	2b16      	cmp	r3, #22
 80050a4:	d101      	bne.n	80050aa <__sflush_r+0xb6>
 80050a6:	602f      	str	r7, [r5, #0]
 80050a8:	e7b1      	b.n	800500e <__sflush_r+0x1a>
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	e7ad      	b.n	8005010 <__sflush_r+0x1c>
 80050b4:	690f      	ldr	r7, [r1, #16]
 80050b6:	2f00      	cmp	r7, #0
 80050b8:	d0a9      	beq.n	800500e <__sflush_r+0x1a>
 80050ba:	0793      	lsls	r3, r2, #30
 80050bc:	680e      	ldr	r6, [r1, #0]
 80050be:	bf08      	it	eq
 80050c0:	694b      	ldreq	r3, [r1, #20]
 80050c2:	600f      	str	r7, [r1, #0]
 80050c4:	bf18      	it	ne
 80050c6:	2300      	movne	r3, #0
 80050c8:	eba6 0807 	sub.w	r8, r6, r7
 80050cc:	608b      	str	r3, [r1, #8]
 80050ce:	f1b8 0f00 	cmp.w	r8, #0
 80050d2:	dd9c      	ble.n	800500e <__sflush_r+0x1a>
 80050d4:	6a21      	ldr	r1, [r4, #32]
 80050d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050d8:	4643      	mov	r3, r8
 80050da:	463a      	mov	r2, r7
 80050dc:	4628      	mov	r0, r5
 80050de:	47b0      	blx	r6
 80050e0:	2800      	cmp	r0, #0
 80050e2:	dc06      	bgt.n	80050f2 <__sflush_r+0xfe>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e78e      	b.n	8005010 <__sflush_r+0x1c>
 80050f2:	4407      	add	r7, r0
 80050f4:	eba8 0800 	sub.w	r8, r8, r0
 80050f8:	e7e9      	b.n	80050ce <__sflush_r+0xda>
 80050fa:	bf00      	nop
 80050fc:	dfbffffe 	.word	0xdfbffffe

08005100 <_fflush_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	4605      	mov	r5, r0
 8005106:	460c      	mov	r4, r1
 8005108:	b913      	cbnz	r3, 8005110 <_fflush_r+0x10>
 800510a:	2500      	movs	r5, #0
 800510c:	4628      	mov	r0, r5
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	b118      	cbz	r0, 800511a <_fflush_r+0x1a>
 8005112:	6a03      	ldr	r3, [r0, #32]
 8005114:	b90b      	cbnz	r3, 800511a <_fflush_r+0x1a>
 8005116:	f7ff f9a9 	bl	800446c <__sinit>
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f3      	beq.n	800510a <_fflush_r+0xa>
 8005122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	d404      	bmi.n	8005132 <_fflush_r+0x32>
 8005128:	0599      	lsls	r1, r3, #22
 800512a:	d402      	bmi.n	8005132 <_fflush_r+0x32>
 800512c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800512e:	f7ff fb92 	bl	8004856 <__retarget_lock_acquire_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	4621      	mov	r1, r4
 8005136:	f7ff ff5d 	bl	8004ff4 <__sflush_r>
 800513a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513c:	07da      	lsls	r2, r3, #31
 800513e:	4605      	mov	r5, r0
 8005140:	d4e4      	bmi.n	800510c <_fflush_r+0xc>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	059b      	lsls	r3, r3, #22
 8005146:	d4e1      	bmi.n	800510c <_fflush_r+0xc>
 8005148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514a:	f7ff fb85 	bl	8004858 <__retarget_lock_release_recursive>
 800514e:	e7dd      	b.n	800510c <_fflush_r+0xc>

08005150 <__swhatbuf_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	2900      	cmp	r1, #0
 800515a:	b096      	sub	sp, #88	; 0x58
 800515c:	4615      	mov	r5, r2
 800515e:	461e      	mov	r6, r3
 8005160:	da0d      	bge.n	800517e <__swhatbuf_r+0x2e>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	bf0c      	ite	eq
 800516e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005172:	2340      	movne	r3, #64	; 0x40
 8005174:	2000      	movs	r0, #0
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	b016      	add	sp, #88	; 0x58
 800517c:	bd70      	pop	{r4, r5, r6, pc}
 800517e:	466a      	mov	r2, sp
 8005180:	f000 f848 	bl	8005214 <_fstat_r>
 8005184:	2800      	cmp	r0, #0
 8005186:	dbec      	blt.n	8005162 <__swhatbuf_r+0x12>
 8005188:	9901      	ldr	r1, [sp, #4]
 800518a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800518e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005192:	4259      	negs	r1, r3
 8005194:	4159      	adcs	r1, r3
 8005196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519a:	e7eb      	b.n	8005174 <__swhatbuf_r+0x24>

0800519c <__smakebuf_r>:
 800519c:	898b      	ldrh	r3, [r1, #12]
 800519e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051a0:	079d      	lsls	r5, r3, #30
 80051a2:	4606      	mov	r6, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	d507      	bpl.n	80051b8 <__smakebuf_r+0x1c>
 80051a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	2301      	movs	r3, #1
 80051b2:	6163      	str	r3, [r4, #20]
 80051b4:	b002      	add	sp, #8
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	ab01      	add	r3, sp, #4
 80051ba:	466a      	mov	r2, sp
 80051bc:	f7ff ffc8 	bl	8005150 <__swhatbuf_r>
 80051c0:	9900      	ldr	r1, [sp, #0]
 80051c2:	4605      	mov	r5, r0
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff fbb5 	bl	8004934 <_malloc_r>
 80051ca:	b948      	cbnz	r0, 80051e0 <__smakebuf_r+0x44>
 80051cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d0:	059a      	lsls	r2, r3, #22
 80051d2:	d4ef      	bmi.n	80051b4 <__smakebuf_r+0x18>
 80051d4:	f023 0303 	bic.w	r3, r3, #3
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	e7e3      	b.n	80051a8 <__smakebuf_r+0xc>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	9b00      	ldr	r3, [sp, #0]
 80051ec:	6163      	str	r3, [r4, #20]
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	6120      	str	r0, [r4, #16]
 80051f2:	b15b      	cbz	r3, 800520c <__smakebuf_r+0x70>
 80051f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f81d 	bl	8005238 <_isatty_r>
 80051fe:	b128      	cbz	r0, 800520c <__smakebuf_r+0x70>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	431d      	orrs	r5, r3
 8005210:	81a5      	strh	r5, [r4, #12]
 8005212:	e7cf      	b.n	80051b4 <__smakebuf_r+0x18>

08005214 <_fstat_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	; (8005234 <_fstat_r+0x20>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f7fb fefa 	bl	800101a <_fstat>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d102      	bne.n	8005230 <_fstat_r+0x1c>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	b103      	cbz	r3, 8005230 <_fstat_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	2000033c 	.word	0x2000033c

08005238 <_isatty_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	; (8005254 <_isatty_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fb fef9 	bl	800103a <_isatty>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_isatty_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_isatty_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	2000033c 	.word	0x2000033c

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	; (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb ff02 	bl	800106c <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	2000033c 	.word	0x2000033c

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

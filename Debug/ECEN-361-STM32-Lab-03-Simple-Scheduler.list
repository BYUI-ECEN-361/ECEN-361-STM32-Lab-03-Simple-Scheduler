
ECEN-361-STM32-Lab-03-Simple-Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000068  080055a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080055a0  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105e3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002328  00000000  00000000  000306be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000329e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c44  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279fd  00000000  00000000  000345ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011eac  00000000  00000000  0005bfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f476f  00000000  00000000  0006de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004970  00000000  00000000  00162604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00166f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800542c 	.word	0x0800542c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800542c 	.word	0x0800542c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa21 	bl	80019e4 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa10 	bl	80019e4 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa05 	bl	80019e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f9ff 	bl	80019e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f9f9 	bl	80019e4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	value = (value & 0b1111) % 10 ;
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	f003 020f 	and.w	r2, r3, #15
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MultiFunctionShield_Single_Digit_Display+0x90>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	1099      	asrs	r1, r3, #2
 8000622:	17d3      	asrs	r3, r2, #31
 8000624:	1ac9      	subs	r1, r1, r3
 8000626:	460b      	mov	r3, r1
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1ad1      	subs	r1, r2, r3
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	if ((digit <=4 ) && (digit >=0))
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b04      	cmp	r3, #4
 8000638:	dc1a      	bgt.n	8000670 <MultiFunctionShield_Single_Digit_Display+0x68>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db17      	blt.n	8000670 <MultiFunctionShield_Single_Digit_Display+0x68>
		SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000640:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MultiFunctionShield_Single_Digit_Display+0x90>)
 8000646:	fb83 1302 	smull	r1, r3, r3, r2
 800064a:	1099      	asrs	r1, r3, #2
 800064c:	17d3      	asrs	r3, r2, #31
 800064e:	1ac9      	subs	r1, r1, r3
 8000650:	460b      	mov	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	b25b      	sxtb	r3, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1c3 0304 	rsb	r3, r3, #4
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <MultiFunctionShield_Single_Digit_Display+0x94>)
 8000668:	5c51      	ldrb	r1, [r2, r1]
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 800066c:	54d1      	strb	r1, [r2, r3]
 800066e:	e00c      	b.n	800068a <MultiFunctionShield_Single_Digit_Display+0x82>
	else
	{
		SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000670:	22bf      	movs	r2, #191	; 0xbf
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000674:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000676:	22bf      	movs	r2, #191	; 0xbf
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 800067a:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MINUS;
 800067c:	22bf      	movs	r2, #191	; 0xbf
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000680:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000682:	22bf      	movs	r2, #191	; 0xbf
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MultiFunctionShield_Single_Digit_Display+0x98>)
 8000686:	70da      	strb	r2, [r3, #3]
		}
	}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	66666667 	.word	0x66666667
 800069c:	0800549c 	.word	0x0800549c
 80006a0:	20000088 	.word	0x20000088

080006a4 <MultiFunctionShield_Clear>:
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
}

void MultiFunctionShield_Clear(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006ac:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006b2:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006b8:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <MultiFunctionShield_Clear+0x28>)
 80006be:	70da      	strb	r2, [r3, #3]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000088 	.word	0x20000088

080006d0 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2120      	movs	r1, #32
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006e0:	f001 f980 	bl	80019e4 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006e4:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f7ff ff33 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000706:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f7ff ff23 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 800072c:	f001 f95a 	bl	80019e4 <HAL_GPIO_WritePin>
	}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000400 	.word	0x48000400
 800073c:	20000088 	.word	0x20000088
 8000740:	080054a8 	.word	0x080054a8

08000744 <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 8000754:	4611      	mov	r1, r2
 8000756:	7019      	strb	r1, [r3, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	3b01      	subs	r3, #1
 800075c:	2b03      	cmp	r3, #3
 800075e:	d81e      	bhi.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
 8000760:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <MultiFunctionShield__ISRFunc+0x24>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	08000779 	.word	0x08000779
 800076c:	08000781 	.word	0x08000781
 8000770:	08000789 	.word	0x08000789
 8000774:	08000791 	.word	0x08000791
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffa9 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 800077e:	e00e      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ffa5 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 8000786:	e00a      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff ffa1 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 800078e:	e006      	b.n	800079e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff9d 	bl	80006d0 <MultiFunctionShield_WriteNumberToSegment>
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <MultiFunctionShield__ISRFunc+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	bf00      	nop
  }
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <Scheduler_Init>:
taskControlBlock tasks[MAXTASKS];


/**  declarations */
void Scheduler_Init()
	{ last_runtime = uwTick; }
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <Scheduler_Init+0x18>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <Scheduler_Init+0x1c>)
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	2000020c 	.word	0x2000020c
 80007c4:	2000008c 	.word	0x2000008c

080007c8 <Scheduler_StartTask>:
  * @param taskname The control buffer structure
  * @retval None
  */

void Scheduler_StartTask(int period, task_cb task, char* taskname)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
    if (num_tasks < MAXTASKS)
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <Scheduler_StartTask+0x98>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dc3a      	bgt.n	8000852 <Scheduler_StartTask+0x8a>
    {
        tasks[num_tasks].period = period;
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <Scheduler_StartTask+0x98>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4920      	ldr	r1, [pc, #128]	; (8000864 <Scheduler_StartTask+0x9c>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	601a      	str	r2, [r3, #0]
        tasks[num_tasks].remaining_time = 0;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <Scheduler_StartTask+0x98>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	491b      	ldr	r1, [pc, #108]	; (8000864 <Scheduler_StartTask+0x9c>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	3304      	adds	r3, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
        tasks[num_tasks].suspended = false;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <Scheduler_StartTask+0x98>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4916      	ldr	r1, [pc, #88]	; (8000864 <Scheduler_StartTask+0x9c>)
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	440b      	add	r3, r1
 8000816:	3308      	adds	r3, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
        tasks[num_tasks].callback = task;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <Scheduler_StartTask+0x98>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4910      	ldr	r1, [pc, #64]	; (8000864 <Scheduler_StartTask+0x9c>)
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	3310      	adds	r3, #16
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	601a      	str	r2, [r3, #0]
        tasks[num_tasks].task_name = taskname;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <Scheduler_StartTask+0x98>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	490b      	ldr	r1, [pc, #44]	; (8000864 <Scheduler_StartTask+0x9c>)
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	330c      	adds	r3, #12
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
        num_tasks++;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <Scheduler_StartTask+0x98>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <Scheduler_StartTask+0x98>)
 8000850:	6013      	str	r3, [r2, #0]
    }
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000090 	.word	0x20000090
 8000864:	20000098 	.word	0x20000098

08000868 <find_task_number>:

int find_task_number(char* theTaskName)
	{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	int taskcnt = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
	/* find the task */
	for (taskcnt=0;taskcnt < num_tasks;taskcnt++)
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e010      	b.n	800089c <find_task_number+0x34>
		{
		if (tasks[taskcnt].task_name == theTaskName)
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <find_task_number+0x4c>)
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	330c      	adds	r3, #12
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	d101      	bne.n	8000896 <find_task_number+0x2e>
		return taskcnt;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	e008      	b.n	80008a8 <find_task_number+0x40>
	for (taskcnt=0;taskcnt < num_tasks;taskcnt++)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <find_task_number+0x50>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe9      	blt.n	800087a <find_task_number+0x12>
		}
	return 0;
 80008a6:	2300      	movs	r3, #0
	}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000098 	.word	0x20000098
 80008b8:	20000090 	.word	0x20000090

080008bc <Scheduler_Toggle_Suspend>:

void Scheduler_Toggle_Suspend(char* theTaskName)
	{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	int theTaskNumber =find_task_number(theTaskName);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ffcf 	bl	8000868 <find_task_number>
 80008ca:	60f8      	str	r0, [r7, #12]
	if (tasks[theTaskNumber].suspended)
 80008cc:	4911      	ldr	r1, [pc, #68]	; (8000914 <Scheduler_Toggle_Suspend+0x58>)
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00a      	beq.n	80008f8 <Scheduler_Toggle_Suspend+0x3c>
		{tasks[theTaskNumber].suspended = false;}
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <Scheduler_Toggle_Suspend+0x58>)
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	440b      	add	r3, r1
 80008f0:	3308      	adds	r3, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	else
		{tasks[theTaskNumber].suspended = true;}
	}
 80008f6:	e009      	b.n	800090c <Scheduler_Toggle_Suspend+0x50>
		{tasks[theTaskNumber].suspended = true;}
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <Scheduler_Toggle_Suspend+0x58>)
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	3308      	adds	r3, #8
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
	}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000098 	.word	0x20000098

08000918 <D1_task>:


/*************** HERE ARE THE SEPARATE TASKS!   *******************/

void D1_task()
    { TASK_D1_LED_TOGGLE
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f001 f877 	bl	8001a14 <HAL_GPIO_TogglePin>
	  MultiFunctionShield_Single_Digit_Display (1, Task_D1_Count++);
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <D1_task+0x30>)
 8000928:	f9b3 2000 	ldrsh.w	r2, [r3]
 800092c:	b293      	uxth	r3, r2
 800092e:	3301      	adds	r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	b219      	sxth	r1, r3
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <D1_task+0x30>)
 8000936:	8019      	strh	r1, [r3, #0]
 8000938:	b253      	sxtb	r3, r2
 800093a:	4619      	mov	r1, r3
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fe63 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>

    }
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000094 	.word	0x20000094

0800094c <D4_task>:

void D4_task()
    { TASK_D4_LED_TOGGLE
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <D4_task+0x2c>)
 8000954:	f001 f85e 	bl	8001a14 <HAL_GPIO_TogglePin>
	  MultiFunctionShield_Single_Digit_Display (4, Task_D4_Count++);
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <D4_task+0x30>)
 800095a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800095e:	b293      	uxth	r3, r2
 8000960:	3301      	adds	r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	b219      	sxth	r1, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <D4_task+0x30>)
 8000968:	8019      	strh	r1, [r3, #0]
 800096a:	b253      	sxtb	r3, r2
 800096c:	4619      	mov	r1, r3
 800096e:	2004      	movs	r0, #4
 8000970:	f7ff fe4a 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	  }
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	48000400 	.word	0x48000400
 800097c:	20000096 	.word	0x20000096

08000980 <idle_process>:
    print_out_the_systick_count();
    */
    }

void idle_process()
    {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
     *  Example here:  Toggle the RGB_REG_TOGGLE
     *
     *  It should return before the idle period (measured in ms) has expired.
     */
    if (DIAGNOSTIC) {
        printf("Entered IDLE on tick: %ld\n\r",uwTick);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <idle_process+0x1c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <idle_process+0x20>)
 800098c:	f003 fe80 	bl	8004690 <iprintf>
        }
     HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f000 fd47 	bl	8001424 <HAL_Delay>
    }
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000020c 	.word	0x2000020c
 80009a0:	08005444 	.word	0x08005444

080009a4 <Scheduler_Dispatch>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/******************************** STUDENT EDITABLE HERE STARTS HERE ***********************/
  void Scheduler_Dispatch()
      {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
      /* uWTick is updated each SysTick*/
      uint32_t runTime = uwTick - last_runtime;     /* Save how long this slice has been going */
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <Scheduler_Dispatch+0xe0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <Scheduler_Dispatch+0xe4>)
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	607b      	str	r3, [r7, #4]
      last_runtime = uwTick;
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <Scheduler_Dispatch+0xe0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <Scheduler_Dispatch+0xe4>)
 80009be:	601a      	str	r2, [r3, #0]
      task_cb task = NULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
       * YOUR CODE GOES HERE
       * Note that you should also look at the 'suspended' piece of information
       * in the task_control block to see if the scheduler needs to skip the task for now
       */
      int i;
         for(i = 0; i < num_tasks; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	e04c      	b.n	8000a64 <Scheduler_Dispatch+0xc0>
         {
           if (tasks[i].suspended == false)
 80009ca:	4930      	ldr	r1, [pc, #192]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3308      	adds	r3, #8
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d13e      	bne.n	8000a5e <Scheduler_Dispatch+0xba>
           {
             tasks[i].remaining_time -= runTime;
 80009e0:	492a      	ldr	r1, [pc, #168]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	440b      	add	r3, r1
 80009ee:	3304      	adds	r3, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	4924      	ldr	r1, [pc, #144]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	3304      	adds	r3, #4
 8000a0a:	6018      	str	r0, [r3, #0]
             if (tasks[i].remaining_time < 0)
 8000a0c:	491f      	ldr	r1, [pc, #124]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	440b      	add	r3, r1
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da1d      	bge.n	8000a5e <Scheduler_Dispatch+0xba>
             {
               if (task == NULL)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11a      	bne.n	8000a5e <Scheduler_Dispatch+0xba>
               {
                 tasks[i].remaining_time = tasks[i].period;
 8000a28:	4918      	ldr	r1, [pc, #96]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	6819      	ldr	r1, [r3, #0]
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4403      	add	r3, r0
 8000a46:	3304      	adds	r3, #4
 8000a48:	6019      	str	r1, [r3, #0]
                 task = tasks[i].callback;
 8000a4a:	4910      	ldr	r1, [pc, #64]	; (8000a8c <Scheduler_Dispatch+0xe8>)
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	3310      	adds	r3, #16
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
         for(i = 0; i < num_tasks; i++)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <Scheduler_Dispatch+0xec>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbad      	blt.n	80009ca <Scheduler_Dispatch+0x26>
               }
             }
           }
         }
         if (task == NULL)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <Scheduler_Dispatch+0xd4>
         {
           task = idle_process;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <Scheduler_Dispatch+0xf0>)
 8000a76:	60fb      	str	r3, [r7, #12]
         }
         task();
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4798      	blx	r3
         return;
 8000a7c:	bf00      	nop
         }
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000020c 	.word	0x2000020c
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	20000090 	.word	0x20000090
 8000a94:	08000981 	.word	0x08000981

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 fc46 	bl	800132c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f850 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 f94a 	bl	8000d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aa8:	f000 f918 	bl	8000cdc <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000aac:	f000 f8f0 	bl	8000c90 <MX_TIM17_Init>
  MX_TIM1_Init();
 8000ab0:	f000 f89a 	bl	8000be8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);  // LED SevenSeg cycle thru them
 8000ab4:	481b      	ldr	r0, [pc, #108]	; (8000b24 <main+0x8c>)
 8000ab6:	f002 fb57 	bl	8003168 <HAL_TIM_Base_Start_IT>
  // Clear the Seven-Segments
  MultiFunctionShield_Clear();
 8000aba:	f7ff fdf3 	bl	80006a4 <MultiFunctionShield_Clear>


  // Clear the lights
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 ff8d 	bl	80019e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2140      	movs	r1, #64	; 0x40
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 ff87 	bl	80019e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 ff81 	bl	80019e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <main+0x90>)
 8000ae8:	f000 ff7c 	bl	80019e4 <HAL_GPIO_WritePin>
	//MultiFunctionShield_Display(10000);  // Out of range  will display "----"
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\033\143\n");  // clear the terminal before printing
 8000aec:	480f      	ldr	r0, [pc, #60]	; (8000b2c <main+0x94>)
 8000aee:	f003 fe35 	bl	800475c <puts>
  printf("Starting Lab-03:  Write a scheduler\n\r\n\r");  // clear the terminal before printing
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <main+0x98>)
 8000af4:	f003 fdcc 	bl	8004690 <iprintf>
  HAL_Delay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 fc92 	bl	8001424 <HAL_Delay>

	Scheduler_Init();
 8000b00:	f7ff fe52 	bl	80007a8 <Scheduler_Init>
	// Start task arguments are:
	//      start offset in ms, period in ms, function callback
	Scheduler_StartTask(1000, D1_task,"D1_task");
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <main+0x9c>)
 8000b06:	490c      	ldr	r1, [pc, #48]	; (8000b38 <main+0xa0>)
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f7ff fe5c 	bl	80007c8 <Scheduler_StartTask>
	Scheduler_StartTask(1500, D4_task,"D4_task");
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <main+0xa4>)
 8000b12:	490b      	ldr	r1, [pc, #44]	; (8000b40 <main+0xa8>)
 8000b14:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b18:	f7ff fe56 	bl	80007c8 <Scheduler_StartTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Scheduler_Dispatch();
 8000b1c:	f7ff ff42 	bl	80009a4 <Scheduler_Dispatch>
 8000b20:	e7fc      	b.n	8000b1c <main+0x84>
 8000b22:	bf00      	nop
 8000b24:	20000134 	.word	0x20000134
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	08005460 	.word	0x08005460
 8000b30:	08005464 	.word	0x08005464
 8000b34:	0800548c 	.word	0x0800548c
 8000b38:	08000919 	.word	0x08000919
 8000b3c:	08005494 	.word	0x08005494
 8000b40:	0800094d 	.word	0x0800094d

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2244      	movs	r2, #68	; 0x44
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fee2 	bl	800491c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b6a:	f000 ff93 	bl	8001a94 <HAL_PWREx_ControlVoltageScaling>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b74:	f000 f9f0 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b82:	2310      	movs	r3, #16
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b92:	230a      	movs	r3, #10
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b96:	2307      	movs	r3, #7
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 ffca 	bl	8001b40 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bb2:	f000 f9d1 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fb92 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bda:	f000 f9bd 	bl	8000f58 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3758      	adds	r7, #88	; 0x58
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_TIM1_Init+0xa4>)
 8000c0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c36:	f002 fa3f 	bl	80030b8 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f98a 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c52:	f002 fbfb 	bl	800344c <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c5c:	f000 f97c 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM1_Init+0xa0>)
 8000c72:	f002 fe11 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c7c:	f000 f96c 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000e8 	.word	0x200000e8
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <MX_TIM17_Init+0x48>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000c9c:	f240 321f 	movw	r2, #799	; 0x31f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cc2:	f002 f9f9 	bl	80030b8 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000ccc:	f000 f944 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000134 	.word	0x20000134
 8000cd8:	40014800 	.word	0x40014800

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_USART2_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d20:	f002 fe60 	bl	80039e4 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 f915 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000180 	.word	0x20000180
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a5b      	ldr	r2, [pc, #364]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a55      	ldr	r2, [pc, #340]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <MX_GPIO_Init+0x188>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fe12 	bl	80019e4 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2160      	movs	r1, #96	; 0x60
 8000dc4:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x18c>)
 8000dc6:	f000 fe0d 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	483a      	ldr	r0, [pc, #232]	; (8000ecc <MX_GPIO_Init+0x190>)
 8000de2:	f000 fc55 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000de6:	2302      	movs	r3, #2
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dea:	230b      	movs	r3, #11
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4834      	ldr	r0, [pc, #208]	; (8000ecc <MX_GPIO_Init+0x190>)
 8000dfa:	f000 fc49 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e02:	230b      	movs	r3, #11
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fc3c 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f000 fc2e 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000e34:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000e38:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fc1e 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0x18c>)
 8000e6a:	f000 fc11 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8000e6e:	2360      	movs	r3, #96	; 0x60
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <MX_GPIO_Init+0x18c>)
 8000e86:	f000 fc03 	bl	8001690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2006      	movs	r0, #6
 8000e90:	f000 fbc7 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 fbe0 	bl	800165a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f000 fbbf 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f000 fbd8 	bl	800165a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f000 fbb7 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f000 fbd0 	bl	800165a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ed8:	1d39      	adds	r1, r7, #4
 8000eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <__io_putchar+0x20>)
 8000ee2:	f002 fdcd 	bl	8003a80 <HAL_UART_Transmit>

  return ch;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000180 	.word	0x20000180

08000ef4 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2b10      	cmp	r3, #16
 8000f02:	d009      	beq.n	8000f18 <HAL_GPIO_EXTI_Callback+0x24>
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	dc0b      	bgt.n	8000f20 <HAL_GPIO_EXTI_Callback+0x2c>
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d00b      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x30>
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d107      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x2c>
	{
	case Button_1_Pin:
		// Toggle the suspend on task D1
		Scheduler_Toggle_Suspend("D1_task");
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f12:	f7ff fcd3 	bl	80008bc <Scheduler_Toggle_Suspend>
		break;
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_EXTI_Callback+0x32>
	case Button_2_Pin:
		// Toggle the suspend on task D4
		Scheduler_Toggle_Suspend("D4_task");
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f1a:	f7ff fccf 	bl	80008bc <Scheduler_Toggle_Suspend>
		// HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
		break;
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_EXTI_Callback+0x32>
	case Button_3_Pin:
		break;
	default:
      __NOP();
 8000f20:	bf00      	nop
	}
}
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_EXTI_Callback+0x32>
		break;
 8000f24:	bf00      	nop
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800548c 	.word	0x0800548c
 8000f34:	08005494 	.word	0x08005494

08000f38 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED

  if (htim == &htim17 )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x14>
	  {
		  MultiFunctionShield__ISRFunc();
 8000f48:	f7ff fbfc 	bl	8000744 <MultiFunctionShield__ISRFunc>
	  }

	}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000134 	.word	0x20000134

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a16      	ldr	r2, [pc, #88]	; (8001014 <HAL_TIM_Base_MspInit+0x68>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d114      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2018      	movs	r0, #24
 8000fdc:	f000 fb21 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000fe0:	2018      	movs	r0, #24
 8000fe2:	f000 fb3a 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000fe6:	e010      	b.n	800100a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_TIM_Base_MspInit+0x70>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d10b      	bne.n	800100a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012c00 	.word	0x40012c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40014800 	.word	0x40014800

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ac      	sub	sp, #176	; 0xb0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2288      	movs	r2, #136	; 0x88
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fc6b 	bl	800491c <memset>
  if(huart->Instance==USART2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_UART_MspInit+0xb0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fb6f 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff ff76 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001076:	6593      	str	r3, [r2, #88]	; 0x58
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fae4 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	37b0      	adds	r7, #176	; 0xb0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f95e 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

	/*  THIS launches the students scheduler */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fc89 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 800113e:	2002      	movs	r0, #2
 8001140:	f000 fc82 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 800114c:	2010      	movs	r0, #16
 800114e:	f000 fc7b 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800115e:	f002 f873 	bl	8003248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000e8 	.word	0x200000e8

0800116c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00a      	b.n	8001194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	4601      	mov	r1, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf0      	blt.n	800117e <_read+0x12>
  }

  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e009      	b.n	80011cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe85 	bl	8000ed0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf1      	blt.n	80011b8 <_write+0x12>
  }
  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_close>:

int _close(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001206:	605a      	str	r2, [r3, #4]
  return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_isatty>:

int _isatty(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f003 fb9e 	bl	80049b8 <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20018000 	.word	0x20018000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	20000208 	.word	0x20000208
 80012b0:	20000360 	.word	0x20000360

080012b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff ffea 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f003 fb5d 	bl	80049c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130a:	f7ff fbc5 	bl	8000a98 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001310:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800131c:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8001320:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001324:	2000035c 	.word	0x2000035c

08001328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>
	...

0800132c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_Init+0x3c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x3c>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 f962 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001348:	2000      	movs	r0, #0
 800134a:	f000 f80f 	bl	800136c <HAL_InitTick>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e001      	b.n	800135e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800135a:	f7ff fe03 	bl	8000f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135e:	79fb      	ldrb	r3, [r7, #7]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_InitTick+0x6c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_InitTick+0x70>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_InitTick+0x6c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f96d 	bl	8001676 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10f      	bne.n	80013c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d809      	bhi.n	80013bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f937 	bl	8001622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_InitTick+0x74>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e007      	b.n	80013cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e004      	b.n	80013cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e001      	b.n	80013cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	2000020c 	.word	0x2000020c

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000020c 	.word	0x2000020c

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff8e 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff29 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff3e 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff8e 	bl	8001560 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff31 	bl	80014d0 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	e17f      	b.n	80019a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8171 	beq.w	800199a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x40>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d118      	bne.n	8001770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001744:	2201      	movs	r2, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f003 0201 	and.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b03      	cmp	r3, #3
 800177a:	d017      	beq.n	80017ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d123      	bne.n	8001800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	6939      	ldr	r1, [r7, #16]
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80ac 	beq.w	800199a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b5f      	ldr	r3, [pc, #380]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	4a5e      	ldr	r2, [pc, #376]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6613      	str	r3, [r2, #96]	; 0x60
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001884:	d025      	beq.n	80018d2 <HAL_GPIO_Init+0x242>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <HAL_GPIO_Init+0x338>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x23e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <HAL_GPIO_Init+0x33c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x23a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <HAL_GPIO_Init+0x340>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x236>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <HAL_GPIO_Init+0x344>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x232>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_GPIO_Init+0x348>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x22e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_GPIO_Init+0x34c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x22a>
 80018b6:	2306      	movs	r3, #6
 80018b8:	e00c      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00a      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018be:	2305      	movs	r3, #5
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018d2:	2300      	movs	r3, #0
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e4:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x334>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_GPIO_Init+0x350>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001916:	4a32      	ldr	r2, [pc, #200]	; (80019e0 <HAL_GPIO_Init+0x350>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_GPIO_Init+0x350>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001940:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <HAL_GPIO_Init+0x350>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_GPIO_Init+0x350>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_GPIO_Init+0x350>)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_GPIO_Init+0x350>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_GPIO_Init+0x350>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f ae78 	bne.w	80016a0 <HAL_GPIO_Init+0x10>
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	48001800 	.word	0x48001800
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43d9      	mvns	r1, r3
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	400b      	ands	r3, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa44 	bl	8000ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40007000 	.word	0x40007000

08001a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa2:	d130      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab0:	d038      	beq.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2232      	movs	r2, #50	; 0x32
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad8:	e002      	b.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aec:	d102      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f2      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b00:	d110      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e00f      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d007      	beq.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40007000 	.word	0x40007000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e3ca      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b97      	ldr	r3, [pc, #604]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b94      	ldr	r3, [pc, #592]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80e4 	beq.w	8001d3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4a>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	f040 808b 	bne.w	8001c98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 8087 	bne.w	8001c98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x62>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3a2      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_RCC_OscConfig+0x7c>
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_OscConfig+0x88>
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d223      	bcs.n	8001c14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fd55 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e383      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be0:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b70      	ldr	r3, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	496d      	ldr	r1, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfe:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4968      	ldr	r1, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e025      	b.n	8001c60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4960      	ldr	r1, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	495b      	ldr	r1, [pc, #364]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fd15 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e343      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c60:	f000 fc4a 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4950      	ldr	r1, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_RCC_OscConfig+0x278>)
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fb71 	bl	800136c <HAL_InitTick>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d052      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e327      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fbae 	bl	800140c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fbaa 	bl	800140c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e310      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4931      	ldr	r1, [pc, #196]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	492c      	ldr	r1, [pc, #176]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e01a      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d12:	f7ff fb7b 	bl	800140c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb77 	bl	800140c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e2dd      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x1da>
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d074      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x21a>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d10e      	bne.n	8001d72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d10b      	bne.n	8001d72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d064      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d160      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e2ba      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x24a>
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e026      	b.n	8001dd8 <HAL_RCC_OscConfig+0x298>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x280>
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x298>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	080054ac 	.word	0x080054ac
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	4ba0      	ldr	r3, [pc, #640]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a9f      	ldr	r2, [pc, #636]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b9d      	ldr	r3, [pc, #628]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a9c      	ldr	r2, [pc, #624]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb14 	bl	800140c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fb10 	bl	800140c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e276      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x2a8>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb00 	bl	800140c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fafc 	bl	800140c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e262      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2d0>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d060      	beq.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x310>
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d119      	bne.n	8001e7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d116      	bne.n	8001e7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x328>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e23f      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4973      	ldr	r1, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	e040      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d023      	beq.n	8001ece <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff fabb 	bl	800140c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fab7 	bl	800140c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e21d      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	495f      	ldr	r1, [pc, #380]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	e018      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5c      	ldr	r2, [pc, #368]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fa97 	bl	800140c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa93 	bl	800140c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1f9      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d03c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff fa72 	bl	800140c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fa6e 	bl	800140c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1d4      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ef      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3ec>
 8001f4c:	e01b      	b.n	8001f86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fa55 	bl	800140c <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fa51 	bl	800140c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1b7      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ef      	bne.n	8001f66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a6 	beq.w	80020e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d118      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa18 	bl	800140c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7ff fa14 	bl	800140c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x4d8>
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002016:	e029      	b.n	800206c <HAL_RCC_OscConfig+0x52c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d115      	bne.n	800204c <HAL_RCC_OscConfig+0x50c>
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x52c>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	4b9c      	ldr	r3, [pc, #624]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a9b      	ldr	r2, [pc, #620]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a97      	ldr	r2, [pc, #604]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f9ca 	bl	800140c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f9c6 	bl	800140c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e12a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ed      	beq.n	800207c <HAL_RCC_OscConfig+0x53c>
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff f9b3 	bl	800140c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff f9af 	bl	800140c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e113      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ed      	bne.n	80020aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80fe 	beq.w	80022e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	f040 80d0 	bne.w	8002294 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f4:	4b72      	ldr	r3, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	429a      	cmp	r2, r3
 8002106:	d130      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	3b01      	subs	r3, #1
 8002114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d127      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11f      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002134:	2a07      	cmp	r2, #7
 8002136:	bf14      	ite	ne
 8002138:	2201      	movne	r2, #1
 800213a:	2200      	moveq	r2, #0
 800213c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d109      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d06e      	beq.n	8002248 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d069      	beq.n	8002244 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ad      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002198:	f7ff f938 	bl	800140c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff f934 	bl	800140c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e09a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCC_OscConfig+0x784>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ce:	3a01      	subs	r2, #1
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	4311      	orrs	r1, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d8:	0212      	lsls	r2, r2, #8
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e0:	0852      	lsrs	r2, r2, #1
 80021e2:	3a01      	subs	r2, #1
 80021e4:	0552      	lsls	r2, r2, #21
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ec:	0852      	lsrs	r2, r2, #1
 80021ee:	3a01      	subs	r2, #1
 80021f0:	0652      	lsls	r2, r2, #25
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021f8:	0912      	lsrs	r2, r2, #4
 80021fa:	0452      	lsls	r2, r2, #17
 80021fc:	430a      	orrs	r2, r1
 80021fe:	4930      	ldr	r1, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002204:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800221c:	f7ff f8f6 	bl	800140c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff f8f2 	bl	800140c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e058      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002242:	e050      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e04f      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d148      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800226c:	f7ff f8ce 	bl	800140c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff f8ca 	bl	800140c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e030      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x734>
 8002292:	e028      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d023      	beq.n	80022e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80022a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f8b1 	bl	800140c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	e00c      	b.n	80022c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff f8ad 	bl	800140c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d905      	bls.n	80022c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ec      	bne.n	80022ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	4905      	ldr	r1, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x7b4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e001      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	feeefffc 	.word	0xfeeefffc

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e7      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4970      	ldr	r1, [pc, #448]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0cf      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	429a      	cmp	r2, r3
 8002356:	d908      	bls.n	800236a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4960      	ldr	r1, [pc, #384]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04c      	beq.n	8002410 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0a6      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e09a      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08e      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e086      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4943      	ldr	r1, [pc, #268]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7ff f814 	bl	800140c <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff f810 	bl	800140c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e06e      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	429a      	cmp	r2, r3
 800242a:	d208      	bcs.n	800243e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	492b      	ldr	r1, [pc, #172]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d210      	bcs.n	800246e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 0207 	bic.w	r2, r3, #7
 8002454:	4923      	ldr	r1, [pc, #140]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e036      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4918      	ldr	r1, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4910      	ldr	r1, [pc, #64]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ac:	f000 f824 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	490b      	ldr	r1, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1fc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ff4b 	bl	800136c <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
 80024d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024da:	7afb      	ldrb	r3, [r7, #11]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	080054ac 	.word	0x080054ac
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d121      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d11e      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e005      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d102      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_GetSysClockFreq+0x110>)
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e004      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d101      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_RCC_GetSysClockFreq+0x114>)
 800257e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d134      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0xa6>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d003      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0xac>
 800259c:	e005      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a0:	617b      	str	r3, [r7, #20]
      break;
 80025a2:	e005      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_GetSysClockFreq+0x114>)
 80025a6:	617b      	str	r3, [r7, #20]
      break;
 80025a8:	e002      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	617b      	str	r3, [r7, #20]
      break;
 80025ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	0e5b      	lsrs	r3, r3, #25
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	3301      	adds	r3, #1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f0:	69bb      	ldr	r3, [r7, #24]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	080054c4 	.word	0x080054c4
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200

08002610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080054bc 	.word	0x080054bc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002658:	f7ff ffda 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0adb      	lsrs	r3, r3, #11
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	080054bc 	.word	0x080054bc

08002680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002698:	f7ff f9ee 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 800269c:	6178      	str	r0, [r7, #20]
 800269e:	e014      	b.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b8:	f7ff f9de 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 80026bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d0:	d10b      	bne.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d919      	bls.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2ba0      	cmp	r3, #160	; 0xa0
 80026dc:	d902      	bls.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026de:	2302      	movs	r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e013      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e010      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d902      	bls.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f0:	2303      	movs	r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e00a      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d102      	bne.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026fc:	2302      	movs	r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	e004      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d101      	bne.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0207 	bic.w	r2, r3, #7
 8002714:	4909      	ldr	r1, [pc, #36]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002748:	2300      	movs	r3, #0
 800274a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2300      	movs	r3, #0
 800274e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	2b00      	cmp	r3, #0
 800275a:	d041      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002764:	d02a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800276a:	d824      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800276c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002776:	d81e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800277c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002780:	d010      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002782:	e018      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002784:	4b86      	ldr	r3, [pc, #536]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a85      	ldr	r2, [pc, #532]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002790:	e015      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fabb 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a2:	e00c      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3320      	adds	r3, #32
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fba6 	bl	8002efc <RCCEx_PLLSAI2_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b4:	e003      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ba:	e000      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d2:	4973      	ldr	r1, [pc, #460]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027da:	e001      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d041      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027f4:	d02a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027fa:	d824      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d81e      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d010      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002812:	e018      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002820:	e015      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fa73 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002832:	e00c      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3320      	adds	r3, #32
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb5e 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002844:	e003      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	74fb      	strb	r3, [r7, #19]
      break;
 800284a:	e000      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800284c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002854:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002862:	494f      	ldr	r1, [pc, #316]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286a:	e001      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a0 	beq.w	80029be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fda4 	bl	800140c <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fda0 	bl	800140c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	74fb      	strb	r3, [r7, #19]
        break;
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d15c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01f      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	d019      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002916:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fd5f 	bl	800140c <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002950:	e00b      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fd5b 	bl	800140c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d902      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	74fb      	strb	r3, [r7, #19]
            break;
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ec      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002996:	e009      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ac:	7c7b      	ldrb	r3, [r7, #17]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	4a9d      	ldr	r2, [pc, #628]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ca:	4b98      	ldr	r3, [pc, #608]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 0203 	bic.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	4994      	ldr	r1, [pc, #592]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ec:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 020c 	bic.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	498c      	ldr	r1, [pc, #560]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a0e:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4983      	ldr	r1, [pc, #524]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	497b      	ldr	r1, [pc, #492]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a52:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	4972      	ldr	r1, [pc, #456]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a74:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	496a      	ldr	r1, [pc, #424]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	4961      	ldr	r1, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab8:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	4959      	ldr	r1, [pc, #356]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	4950      	ldr	r1, [pc, #320]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	4948      	ldr	r1, [pc, #288]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	493f      	ldr	r1, [pc, #252]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d028      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	4937      	ldr	r1, [pc, #220]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	60d3      	str	r3, [r2, #12]
 8002b6c:	e011      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f8c8 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	491f      	ldr	r1, [pc, #124]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc8:	60d3      	str	r3, [r2, #12]
 8002bca:	e011      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f899 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a02      	ldr	r2, [pc, #8]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e014      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f867 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6e:	4928      	ldr	r1, [pc, #160]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f844 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d014      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	74bb      	strb	r3, [r7, #18]
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3320      	adds	r3, #32
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f925 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	4904      	ldr	r1, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000

08002d14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d22:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d2e:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10d      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
       ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
       ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d047      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e044      	b.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d018      	beq.n	8002d9a <RCCEx_PLLSAI1_Config+0x86>
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d825      	bhi.n	8002db8 <RCCEx_PLLSAI1_Config+0xa4>
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0x62>
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d009      	beq.n	8002d88 <RCCEx_PLLSAI1_Config+0x74>
 8002d74:	e020      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d76:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e01a      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e013      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da6:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db6:	e006      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e004      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	430b      	orrs	r3, r1
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d17d      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fb06 	bl	800140c <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e04:	f7fe fb02 	bl	800140c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
        break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ef      	bne.n	8002e04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d160      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	0912      	lsrs	r2, r2, #4
 8002e48:	0452      	lsls	r2, r2, #17
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	492a      	ldr	r1, [pc, #168]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
 8002e52:	e027      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d112      	bne.n	8002e80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0211      	lsls	r1, r2, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6912      	ldr	r2, [r2, #16]
 8002e70:	0852      	lsrs	r2, r2, #1
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0552      	lsls	r2, r2, #21
 8002e76:	430a      	orrs	r2, r1
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	610b      	str	r3, [r1, #16]
 8002e7e:	e011      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6952      	ldr	r2, [r2, #20]
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe faac 	bl	800140c <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb6:	e009      	b.n	8002ecc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb8:	f7fe faa8 	bl	800140c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d902      	bls.n	8002ecc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eca:	e005      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000

08002efc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d018      	beq.n	8002f48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d047      	beq.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e044      	b.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d018      	beq.n	8002f82 <RCCEx_PLLSAI2_Config+0x86>
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d825      	bhi.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d002      	beq.n	8002f5e <RCCEx_PLLSAI2_Config+0x62>
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d009      	beq.n	8002f70 <RCCEx_PLLSAI2_Config+0x74>
 8002f5c:	e020      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f5e:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11d      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6e:	e01a      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d116      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e013      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f82:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f8e:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f9e:	e006      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e004      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	4939      	ldr	r1, [pc, #228]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d167      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa12 	bl	800140c <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fea:	e009      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fec:	f7fe fa0e 	bl	800140c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffe:	e005      	b.n	800300c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ef      	bne.n	8002fec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d14a      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6892      	ldr	r2, [r2, #8]
 8003028:	0211      	lsls	r1, r2, #8
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	0912      	lsrs	r2, r2, #4
 8003030:	0452      	lsls	r2, r2, #17
 8003032:	430a      	orrs	r2, r1
 8003034:	491f      	ldr	r1, [pc, #124]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	614b      	str	r3, [r1, #20]
 800303a:	e011      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6912      	ldr	r2, [r2, #16]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0652      	lsls	r2, r2, #25
 8003058:	430a      	orrs	r2, r1
 800305a:	4916      	ldr	r1, [pc, #88]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe f9ce 	bl	800140c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003074:	f7fe f9ca 	bl	800140c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
          break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e049      	b.n	800315e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd ff64 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 fa9a 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e04f      	b.n	8003220 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_TIM_Base_Start_IT+0xc4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d018      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_TIM_Base_Start_IT+0xc8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_TIM_Base_Start_IT+0xcc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_TIM_Base_Start_IT+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_TIM_Base_Start_IT+0xd4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x76>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_TIM_Base_Start_IT+0xd8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d115      	bne.n	800320a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_TIM_Base_Start_IT+0xdc>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d015      	beq.n	800321c <HAL_TIM_Base_Start_IT+0xb4>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d011      	beq.n	800321c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003208:	e008      	b.n	800321c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e000      	b.n	800321e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40013400 	.word	0x40013400
 8003240:	40014000 	.word	0x40014000
 8003244:	00010007 	.word	0x00010007

08003248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0202 	mvn.w	r2, #2
 800327c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9ad 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f99f 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f9b0 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0204 	mvn.w	r2, #4
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f987 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f979 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f98a 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0208 	mvn.w	r2, #8
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f961 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f953 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f964 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d020      	beq.n	8003390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0210 	mvn.w	r2, #16
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2208      	movs	r2, #8
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f93b 	bl	80035f2 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f92d 	bl	80035de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f93e 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0201 	mvn.w	r2, #1
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fdc2 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 faf2 	bl	80039bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 faea 	bl	80039d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8fd 	bl	800361a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fab2 	bl	80039a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIM_ConfigClockSource+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e0b6      	b.n	80035d6 <HAL_TIM_ConfigClockSource+0x18a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800348a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a4:	d03e      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0xd8>
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034aa:	f200 8087 	bhi.w	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	f000 8086 	beq.w	80035c2 <HAL_TIM_ConfigClockSource+0x176>
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d87f      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d01a      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0xaa>
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d87b      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d050      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x11e>
 80034c8:	2b60      	cmp	r3, #96	; 0x60
 80034ca:	d877      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034cc:	2b50      	cmp	r3, #80	; 0x50
 80034ce:	d03c      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xfe>
 80034d0:	2b50      	cmp	r3, #80	; 0x50
 80034d2:	d873      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d058      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x13e>
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d86f      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d064      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x15e>
 80034e0:	2b30      	cmp	r3, #48	; 0x30
 80034e2:	d86b      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d060      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x15e>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d867      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05c      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x15e>
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d05a      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x15e>
 80034f4:	e062      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003506:	f000 f9a7 	bl	8003858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	609a      	str	r2, [r3, #8]
      break;
 8003522:	e04f      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	f000 f990 	bl	8003858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003546:	609a      	str	r2, [r3, #8]
      break;
 8003548:	e03c      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f904 	bl	8003764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2150      	movs	r1, #80	; 0x50
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f95d 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 8003568:	e02c      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f923 	bl	80037c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2160      	movs	r1, #96	; 0x60
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f94d 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 8003588:	e01c      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f8e4 	bl	8003764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f93d 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 80035a8:	e00c      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f000 f934 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 80035ba:	e003      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e000      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a40      	ldr	r2, [pc, #256]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d00f      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <TIM_Base_SetConfig+0x118>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <TIM_Base_SetConfig+0x11c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <TIM_Base_SetConfig+0x120>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <TIM_Base_SetConfig+0x124>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2f      	ldr	r2, [pc, #188]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d01b      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <TIM_Base_SetConfig+0x118>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d017      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2b      	ldr	r2, [pc, #172]	; (800374c <TIM_Base_SetConfig+0x11c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <TIM_Base_SetConfig+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <TIM_Base_SetConfig+0x124>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a28      	ldr	r2, [pc, #160]	; (8003758 <TIM_Base_SetConfig+0x128>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <TIM_Base_SetConfig+0x12c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a26      	ldr	r2, [pc, #152]	; (8003760 <TIM_Base_SetConfig+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <TIM_Base_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <TIM_Base_SetConfig+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <TIM_Base_SetConfig+0x128>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <TIM_Base_SetConfig+0x12c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <TIM_Base_SetConfig+0x130>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800

08003764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0201 	bic.w	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 030a 	bic.w	r3, r3, #10
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b087      	sub	sp, #28
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 0210 	bic.w	r2, r3, #16
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	031b      	lsls	r3, r3, #12
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	f043 0307 	orr.w	r3, r3, #7
 8003844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	431a      	orrs	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e068      	b.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2e      	ldr	r2, [pc, #184]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2d      	ldr	r2, [pc, #180]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d018      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10c      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40013400 	.word	0x40013400
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40014000 	.word	0x40014000

080039a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fb0a 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb6a 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8af 	bl	8003b94 <UART_SetConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e01b      	b.n	8003a78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fbe9 	bl	8004248 <UART_CheckIdleState>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d178      	bne.n	8003b8a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_UART_Transmit+0x24>
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e071      	b.n	8003b8c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2221      	movs	r2, #33	; 0x21
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fca9 	bl	800140c <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Transmit+0x68>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af0:	e030      	b.n	8003b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fc4b 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e03c      	b.n	8003b8c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b24:	b292      	uxth	r2, r2
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e008      	b.n	8003b42 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b292      	uxth	r2, r2
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1c8      	bne.n	8003af2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fc14 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e005      	b.n	8003b8c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b08a      	sub	sp, #40	; 0x28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4ba4      	ldr	r3, [pc, #656]	; (8003e54 <UART_SetConfig+0x2c0>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a99      	ldr	r2, [pc, #612]	; (8003e58 <UART_SetConfig+0x2c4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <UART_SetConfig+0x2c8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d126      	bne.n	8003c6c <UART_SetConfig+0xd8>
 8003c1e:	4b90      	ldr	r3, [pc, #576]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d81b      	bhi.n	8003c64 <UART_SetConfig+0xd0>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0xa0>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e116      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e112      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e10e      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e10a      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e106      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7c      	ldr	r2, [pc, #496]	; (8003e64 <UART_SetConfig+0x2d0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d138      	bne.n	8003ce8 <UART_SetConfig+0x154>
 8003c76:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	d82d      	bhi.n	8003ce0 <UART_SetConfig+0x14c>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0xf8>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003cc1 	.word	0x08003cc1
 8003c90:	08003ce1 	.word	0x08003ce1
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003cc9 	.word	0x08003cc9
 8003cb0:	08003ce1 	.word	0x08003ce1
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003ce1 	.word	0x08003ce1
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e0d8      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e0d4      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e0d0      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e0cc      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e0c8      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5e      	ldr	r2, [pc, #376]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d125      	bne.n	8003d3e <UART_SetConfig+0x1aa>
 8003cf2:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cfc:	2b30      	cmp	r3, #48	; 0x30
 8003cfe:	d016      	beq.n	8003d2e <UART_SetConfig+0x19a>
 8003d00:	2b30      	cmp	r3, #48	; 0x30
 8003d02:	d818      	bhi.n	8003d36 <UART_SetConfig+0x1a2>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d00a      	beq.n	8003d1e <UART_SetConfig+0x18a>
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d814      	bhi.n	8003d36 <UART_SetConfig+0x1a2>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <UART_SetConfig+0x182>
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d008      	beq.n	8003d26 <UART_SetConfig+0x192>
 8003d14:	e00f      	b.n	8003d36 <UART_SetConfig+0x1a2>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1c:	e0ad      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d24:	e0a9      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d26:	2304      	movs	r3, #4
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2c:	e0a5      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d34:	e0a1      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d36:	2310      	movs	r3, #16
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3c:	e09d      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <UART_SetConfig+0x2d8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d125      	bne.n	8003d94 <UART_SetConfig+0x200>
 8003d48:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d52:	2bc0      	cmp	r3, #192	; 0xc0
 8003d54:	d016      	beq.n	8003d84 <UART_SetConfig+0x1f0>
 8003d56:	2bc0      	cmp	r3, #192	; 0xc0
 8003d58:	d818      	bhi.n	8003d8c <UART_SetConfig+0x1f8>
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d00a      	beq.n	8003d74 <UART_SetConfig+0x1e0>
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d814      	bhi.n	8003d8c <UART_SetConfig+0x1f8>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <UART_SetConfig+0x1d8>
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d008      	beq.n	8003d7c <UART_SetConfig+0x1e8>
 8003d6a:	e00f      	b.n	8003d8c <UART_SetConfig+0x1f8>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e082      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e07e      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e07a      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d84:	2308      	movs	r3, #8
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e076      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e072      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <UART_SetConfig+0x2dc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d12a      	bne.n	8003df4 <UART_SetConfig+0x260>
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dac:	d01a      	beq.n	8003de4 <UART_SetConfig+0x250>
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db2:	d81b      	bhi.n	8003dec <UART_SetConfig+0x258>
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d00c      	beq.n	8003dd4 <UART_SetConfig+0x240>
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d815      	bhi.n	8003dec <UART_SetConfig+0x258>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <UART_SetConfig+0x238>
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d008      	beq.n	8003ddc <UART_SetConfig+0x248>
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x258>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e052      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e04e      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e04a      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003de4:	2308      	movs	r3, #8
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e046      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e042      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <UART_SetConfig+0x2c4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d13a      	bne.n	8003e74 <UART_SetConfig+0x2e0>
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e0c:	d01a      	beq.n	8003e44 <UART_SetConfig+0x2b0>
 8003e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e12:	d81b      	bhi.n	8003e4c <UART_SetConfig+0x2b8>
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d00c      	beq.n	8003e34 <UART_SetConfig+0x2a0>
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d815      	bhi.n	8003e4c <UART_SetConfig+0x2b8>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <UART_SetConfig+0x298>
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d008      	beq.n	8003e3c <UART_SetConfig+0x2a8>
 8003e2a:	e00f      	b.n	8003e4c <UART_SetConfig+0x2b8>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e022      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003e34:	2302      	movs	r3, #2
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e01e      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e01a      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003e44:	2308      	movs	r3, #8
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e016      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e012      	b.n	8003e7a <UART_SetConfig+0x2e6>
 8003e54:	efff69f3 	.word	0xefff69f3
 8003e58:	40008000 	.word	0x40008000
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004800 	.word	0x40004800
 8003e6c:	40004c00 	.word	0x40004c00
 8003e70:	40005000 	.word	0x40005000
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <UART_SetConfig+0x568>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d17a      	bne.n	8003f7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d824      	bhi.n	8003ed6 <UART_SetConfig+0x342>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x300>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ed7 	.word	0x08003ed7
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ec7 	.word	0x08003ec7
 8003ea8:	08003ed7 	.word	0x08003ed7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ed7 	.word	0x08003ed7
 8003eb4:	08003ecf 	.word	0x08003ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fbb6 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	61f8      	str	r0, [r7, #28]
        break;
 8003ebe:	e010      	b.n	8003ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	; (8004100 <UART_SetConfig+0x56c>)
 8003ec2:	61fb      	str	r3, [r7, #28]
        break;
 8003ec4:	e00d      	b.n	8003ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe fb17 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003eca:	61f8      	str	r0, [r7, #28]
        break;
 8003ecc:	e009      	b.n	8003ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e005      	b.n	8003ee2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80fb 	beq.w	80040e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d305      	bcc.n	8003f06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d903      	bls.n	8003f0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f0c:	e0e8      	b.n	80040e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2200      	movs	r2, #0
 8003f12:	461c      	mov	r4, r3
 8003f14:	4615      	mov	r5, r2
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	022b      	lsls	r3, r5, #8
 8003f20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f24:	0222      	lsls	r2, r4, #8
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	6849      	ldr	r1, [r1, #4]
 8003f2a:	0849      	lsrs	r1, r1, #1
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4681      	mov	r9, r0
 8003f32:	eb12 0a08 	adds.w	sl, r2, r8
 8003f36:	eb43 0b09 	adc.w	fp, r3, r9
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f48:	4650      	mov	r0, sl
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	f7fc f990 	bl	8000270 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5e:	d308      	bcc.n	8003f72 <UART_SetConfig+0x3de>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d204      	bcs.n	8003f72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e0b6      	b.n	80040e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f78:	e0b2      	b.n	80040e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d15e      	bne.n	8004042 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d828      	bhi.n	8003fde <UART_SetConfig+0x44a>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0x400>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fdf 	.word	0x08003fdf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe fb36 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	61f8      	str	r0, [r7, #28]
        break;
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe fb48 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003fc4:	61f8      	str	r0, [r7, #28]
        break;
 8003fc6:	e010      	b.n	8003fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <UART_SetConfig+0x56c>)
 8003fca:	61fb      	str	r3, [r7, #28]
        break;
 8003fcc:	e00d      	b.n	8003fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7fe fa93 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003fd2:	61f8      	str	r0, [r7, #28]
        break;
 8003fd4:	e009      	b.n	8003fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	61fb      	str	r3, [r7, #28]
        break;
 8003fdc:	e005      	b.n	8003fea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d077      	beq.n	80040e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005a      	lsls	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	d916      	bls.n	800403a <UART_SetConfig+0x4a6>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d212      	bcs.n	800403a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f023 030f 	bic.w	r3, r3, #15
 800401c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	b29b      	uxth	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	b29a      	uxth	r2, r3
 800402a:	8afb      	ldrh	r3, [r7, #22]
 800402c:	4313      	orrs	r3, r2
 800402e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	8afa      	ldrh	r2, [r7, #22]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	e052      	b.n	80040e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004040:	e04e      	b.n	80040e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004046:	2b08      	cmp	r3, #8
 8004048:	d827      	bhi.n	800409a <UART_SetConfig+0x506>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x4bc>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800409b 	.word	0x0800409b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
 8004070:	08004093 	.word	0x08004093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fad8 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8004078:	61f8      	str	r0, [r7, #28]
        break;
 800407a:	e014      	b.n	80040a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7fe faea 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004080:	61f8      	str	r0, [r7, #28]
        break;
 8004082:	e010      	b.n	80040a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <UART_SetConfig+0x56c>)
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e00d      	b.n	80040a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7fe fa35 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 800408e:	61f8      	str	r0, [r7, #28]
        break;
 8004090:	e009      	b.n	80040a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	61fb      	str	r3, [r7, #28]
        break;
 8004098:	e005      	b.n	80040a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040a4:	bf00      	nop
    }

    if (pclk != 0U)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d019      	beq.n	80040e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	085a      	lsrs	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	441a      	add	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b0f      	cmp	r3, #15
 80040c4:	d909      	bls.n	80040da <UART_SetConfig+0x546>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d205      	bcs.n	80040da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e002      	b.n	80040e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40008000 	.word	0x40008000
 8004100:	00f42400 	.word	0x00f42400

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d10a      	bne.n	800421a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b098      	sub	sp, #96	; 0x60
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fd f8d8 	bl	800140c <HAL_GetTick>
 800425c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d12e      	bne.n	80042ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f88c 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d021      	beq.n	80042ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e062      	b.n	8004390 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d149      	bne.n	800436c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f856 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d03c      	beq.n	800436c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	60fb      	str	r3, [r7, #12]
   return(result);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	617b      	str	r3, [r7, #20]
   return(result);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e011      	b.n	8004390 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3758      	adds	r7, #88	; 0x58
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a8:	e049      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d045      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fd f82b 	bl	800140c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e048      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d031      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d110      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2208      	movs	r2, #8
 80043ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f838 	bl	8004466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2208      	movs	r2, #8
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e029      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d111      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f81e 	bl	8004466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e00f      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	429a      	cmp	r2, r3
 800445a:	d0a6      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004466:	b480      	push	{r7}
 8004468:	b095      	sub	sp, #84	; 0x54
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
 800448e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d118      	bne.n	800450e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	647b      	str	r3, [r7, #68]	; 0x44
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	613b      	str	r3, [r7, #16]
   return(result);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e6      	bne.n	80044dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004522:	bf00      	nop
 8004524:	3754      	adds	r7, #84	; 0x54
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <std>:
 8004530:	2300      	movs	r3, #0
 8004532:	b510      	push	{r4, lr}
 8004534:	4604      	mov	r4, r0
 8004536:	e9c0 3300 	strd	r3, r3, [r0]
 800453a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800453e:	6083      	str	r3, [r0, #8]
 8004540:	8181      	strh	r1, [r0, #12]
 8004542:	6643      	str	r3, [r0, #100]	; 0x64
 8004544:	81c2      	strh	r2, [r0, #14]
 8004546:	6183      	str	r3, [r0, #24]
 8004548:	4619      	mov	r1, r3
 800454a:	2208      	movs	r2, #8
 800454c:	305c      	adds	r0, #92	; 0x5c
 800454e:	f000 f9e5 	bl	800491c <memset>
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <std+0x38>)
 8004554:	6263      	str	r3, [r4, #36]	; 0x24
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <std+0x3c>)
 8004558:	62a3      	str	r3, [r4, #40]	; 0x28
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <std+0x40>)
 800455c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <std+0x44>)
 8004560:	6224      	str	r4, [r4, #32]
 8004562:	6323      	str	r3, [r4, #48]	; 0x30
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	0800476d 	.word	0x0800476d
 800456c:	0800478f 	.word	0x0800478f
 8004570:	080047c7 	.word	0x080047c7
 8004574:	080047eb 	.word	0x080047eb

08004578 <stdio_exit_handler>:
 8004578:	4a02      	ldr	r2, [pc, #8]	; (8004584 <stdio_exit_handler+0xc>)
 800457a:	4903      	ldr	r1, [pc, #12]	; (8004588 <stdio_exit_handler+0x10>)
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <stdio_exit_handler+0x14>)
 800457e:	f000 b869 	b.w	8004654 <_fwalk_sglue>
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c
 8004588:	080052b5 	.word	0x080052b5
 800458c:	20000018 	.word	0x20000018

08004590 <cleanup_stdio>:
 8004590:	6841      	ldr	r1, [r0, #4]
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <cleanup_stdio+0x34>)
 8004594:	4299      	cmp	r1, r3
 8004596:	b510      	push	{r4, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	d001      	beq.n	80045a0 <cleanup_stdio+0x10>
 800459c:	f000 fe8a 	bl	80052b4 <_fflush_r>
 80045a0:	68a1      	ldr	r1, [r4, #8]
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <cleanup_stdio+0x38>)
 80045a4:	4299      	cmp	r1, r3
 80045a6:	d002      	beq.n	80045ae <cleanup_stdio+0x1e>
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 fe83 	bl	80052b4 <_fflush_r>
 80045ae:	68e1      	ldr	r1, [r4, #12]
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <cleanup_stdio+0x3c>)
 80045b2:	4299      	cmp	r1, r3
 80045b4:	d004      	beq.n	80045c0 <cleanup_stdio+0x30>
 80045b6:	4620      	mov	r0, r4
 80045b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045bc:	f000 be7a 	b.w	80052b4 <_fflush_r>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	bf00      	nop
 80045c4:	20000210 	.word	0x20000210
 80045c8:	20000278 	.word	0x20000278
 80045cc:	200002e0 	.word	0x200002e0

080045d0 <global_stdio_init.part.0>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <global_stdio_init.part.0+0x30>)
 80045d4:	4c0b      	ldr	r4, [pc, #44]	; (8004604 <global_stdio_init.part.0+0x34>)
 80045d6:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <global_stdio_init.part.0+0x38>)
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	4620      	mov	r0, r4
 80045dc:	2200      	movs	r2, #0
 80045de:	2104      	movs	r1, #4
 80045e0:	f7ff ffa6 	bl	8004530 <std>
 80045e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80045e8:	2201      	movs	r2, #1
 80045ea:	2109      	movs	r1, #9
 80045ec:	f7ff ffa0 	bl	8004530 <std>
 80045f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80045f4:	2202      	movs	r2, #2
 80045f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045fa:	2112      	movs	r1, #18
 80045fc:	f7ff bf98 	b.w	8004530 <std>
 8004600:	20000348 	.word	0x20000348
 8004604:	20000210 	.word	0x20000210
 8004608:	08004579 	.word	0x08004579

0800460c <__sfp_lock_acquire>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__sfp_lock_acquire+0x8>)
 800460e:	f000 b9fd 	b.w	8004a0c <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	20000351 	.word	0x20000351

08004618 <__sfp_lock_release>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__sfp_lock_release+0x8>)
 800461a:	f000 b9f8 	b.w	8004a0e <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	20000351 	.word	0x20000351

08004624 <__sinit>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	f7ff fff0 	bl	800460c <__sfp_lock_acquire>
 800462c:	6a23      	ldr	r3, [r4, #32]
 800462e:	b11b      	cbz	r3, 8004638 <__sinit+0x14>
 8004630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004634:	f7ff bff0 	b.w	8004618 <__sfp_lock_release>
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <__sinit+0x28>)
 800463a:	6223      	str	r3, [r4, #32]
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__sinit+0x2c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f5      	bne.n	8004630 <__sinit+0xc>
 8004644:	f7ff ffc4 	bl	80045d0 <global_stdio_init.part.0>
 8004648:	e7f2      	b.n	8004630 <__sinit+0xc>
 800464a:	bf00      	nop
 800464c:	08004591 	.word	0x08004591
 8004650:	20000348 	.word	0x20000348

08004654 <_fwalk_sglue>:
 8004654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004658:	4607      	mov	r7, r0
 800465a:	4688      	mov	r8, r1
 800465c:	4614      	mov	r4, r2
 800465e:	2600      	movs	r6, #0
 8004660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004664:	f1b9 0901 	subs.w	r9, r9, #1
 8004668:	d505      	bpl.n	8004676 <_fwalk_sglue+0x22>
 800466a:	6824      	ldr	r4, [r4, #0]
 800466c:	2c00      	cmp	r4, #0
 800466e:	d1f7      	bne.n	8004660 <_fwalk_sglue+0xc>
 8004670:	4630      	mov	r0, r6
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d907      	bls.n	800468c <_fwalk_sglue+0x38>
 800467c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004680:	3301      	adds	r3, #1
 8004682:	d003      	beq.n	800468c <_fwalk_sglue+0x38>
 8004684:	4629      	mov	r1, r5
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	4306      	orrs	r6, r0
 800468c:	3568      	adds	r5, #104	; 0x68
 800468e:	e7e9      	b.n	8004664 <_fwalk_sglue+0x10>

08004690 <iprintf>:
 8004690:	b40f      	push	{r0, r1, r2, r3}
 8004692:	b507      	push	{r0, r1, r2, lr}
 8004694:	4906      	ldr	r1, [pc, #24]	; (80046b0 <iprintf+0x20>)
 8004696:	ab04      	add	r3, sp, #16
 8004698:	6808      	ldr	r0, [r1, #0]
 800469a:	f853 2b04 	ldr.w	r2, [r3], #4
 800469e:	6881      	ldr	r1, [r0, #8]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	f000 fad7 	bl	8004c54 <_vfiprintf_r>
 80046a6:	b003      	add	sp, #12
 80046a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ac:	b004      	add	sp, #16
 80046ae:	4770      	bx	lr
 80046b0:	20000064 	.word	0x20000064

080046b4 <_puts_r>:
 80046b4:	6a03      	ldr	r3, [r0, #32]
 80046b6:	b570      	push	{r4, r5, r6, lr}
 80046b8:	6884      	ldr	r4, [r0, #8]
 80046ba:	4605      	mov	r5, r0
 80046bc:	460e      	mov	r6, r1
 80046be:	b90b      	cbnz	r3, 80046c4 <_puts_r+0x10>
 80046c0:	f7ff ffb0 	bl	8004624 <__sinit>
 80046c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046c6:	07db      	lsls	r3, r3, #31
 80046c8:	d405      	bmi.n	80046d6 <_puts_r+0x22>
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	0598      	lsls	r0, r3, #22
 80046ce:	d402      	bmi.n	80046d6 <_puts_r+0x22>
 80046d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046d2:	f000 f99b 	bl	8004a0c <__retarget_lock_acquire_recursive>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	0719      	lsls	r1, r3, #28
 80046da:	d513      	bpl.n	8004704 <_puts_r+0x50>
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	b18b      	cbz	r3, 8004704 <_puts_r+0x50>
 80046e0:	3e01      	subs	r6, #1
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60a3      	str	r3, [r4, #8]
 80046ec:	b9e9      	cbnz	r1, 800472a <_puts_r+0x76>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da2e      	bge.n	8004750 <_puts_r+0x9c>
 80046f2:	4622      	mov	r2, r4
 80046f4:	210a      	movs	r1, #10
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f87b 	bl	80047f2 <__swbuf_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d007      	beq.n	8004710 <_puts_r+0x5c>
 8004700:	250a      	movs	r5, #10
 8004702:	e007      	b.n	8004714 <_puts_r+0x60>
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f8b0 	bl	800486c <__swsetup_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	d0e7      	beq.n	80046e0 <_puts_r+0x2c>
 8004710:	f04f 35ff 	mov.w	r5, #4294967295
 8004714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004716:	07da      	lsls	r2, r3, #31
 8004718:	d405      	bmi.n	8004726 <_puts_r+0x72>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	059b      	lsls	r3, r3, #22
 800471e:	d402      	bmi.n	8004726 <_puts_r+0x72>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f000 f974 	bl	8004a0e <__retarget_lock_release_recursive>
 8004726:	4628      	mov	r0, r5
 8004728:	bd70      	pop	{r4, r5, r6, pc}
 800472a:	2b00      	cmp	r3, #0
 800472c:	da04      	bge.n	8004738 <_puts_r+0x84>
 800472e:	69a2      	ldr	r2, [r4, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	dc06      	bgt.n	8004742 <_puts_r+0x8e>
 8004734:	290a      	cmp	r1, #10
 8004736:	d004      	beq.n	8004742 <_puts_r+0x8e>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	7019      	strb	r1, [r3, #0]
 8004740:	e7cf      	b.n	80046e2 <_puts_r+0x2e>
 8004742:	4622      	mov	r2, r4
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f854 	bl	80047f2 <__swbuf_r>
 800474a:	3001      	adds	r0, #1
 800474c:	d1c9      	bne.n	80046e2 <_puts_r+0x2e>
 800474e:	e7df      	b.n	8004710 <_puts_r+0x5c>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	250a      	movs	r5, #10
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	6022      	str	r2, [r4, #0]
 8004758:	701d      	strb	r5, [r3, #0]
 800475a:	e7db      	b.n	8004714 <_puts_r+0x60>

0800475c <puts>:
 800475c:	4b02      	ldr	r3, [pc, #8]	; (8004768 <puts+0xc>)
 800475e:	4601      	mov	r1, r0
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	f7ff bfa7 	b.w	80046b4 <_puts_r>
 8004766:	bf00      	nop
 8004768:	20000064 	.word	0x20000064

0800476c <__sread>:
 800476c:	b510      	push	{r4, lr}
 800476e:	460c      	mov	r4, r1
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	f000 f8fc 	bl	8004970 <_read_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	bfab      	itete	ge
 800477c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800477e:	89a3      	ldrhlt	r3, [r4, #12]
 8004780:	181b      	addge	r3, r3, r0
 8004782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004786:	bfac      	ite	ge
 8004788:	6563      	strge	r3, [r4, #84]	; 0x54
 800478a:	81a3      	strhlt	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__swrite>:
 800478e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	461f      	mov	r7, r3
 8004794:	898b      	ldrh	r3, [r1, #12]
 8004796:	05db      	lsls	r3, r3, #23
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
 800479c:	4616      	mov	r6, r2
 800479e:	d505      	bpl.n	80047ac <__swrite+0x1e>
 80047a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a4:	2302      	movs	r3, #2
 80047a6:	2200      	movs	r2, #0
 80047a8:	f000 f8d0 	bl	800494c <_lseek_r>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	4632      	mov	r2, r6
 80047ba:	463b      	mov	r3, r7
 80047bc:	4628      	mov	r0, r5
 80047be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	f000 b8e7 	b.w	8004994 <_write_r>

080047c6 <__sseek>:
 80047c6:	b510      	push	{r4, lr}
 80047c8:	460c      	mov	r4, r1
 80047ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ce:	f000 f8bd 	bl	800494c <_lseek_r>
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	bf15      	itete	ne
 80047d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80047da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047e2:	81a3      	strheq	r3, [r4, #12]
 80047e4:	bf18      	it	ne
 80047e6:	81a3      	strhne	r3, [r4, #12]
 80047e8:	bd10      	pop	{r4, pc}

080047ea <__sclose>:
 80047ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ee:	f000 b89d 	b.w	800492c <_close_r>

080047f2 <__swbuf_r>:
 80047f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f4:	460e      	mov	r6, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	4605      	mov	r5, r0
 80047fa:	b118      	cbz	r0, 8004804 <__swbuf_r+0x12>
 80047fc:	6a03      	ldr	r3, [r0, #32]
 80047fe:	b90b      	cbnz	r3, 8004804 <__swbuf_r+0x12>
 8004800:	f7ff ff10 	bl	8004624 <__sinit>
 8004804:	69a3      	ldr	r3, [r4, #24]
 8004806:	60a3      	str	r3, [r4, #8]
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	071a      	lsls	r2, r3, #28
 800480c:	d525      	bpl.n	800485a <__swbuf_r+0x68>
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	b31b      	cbz	r3, 800485a <__swbuf_r+0x68>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	1a98      	subs	r0, r3, r2
 8004818:	6963      	ldr	r3, [r4, #20]
 800481a:	b2f6      	uxtb	r6, r6
 800481c:	4283      	cmp	r3, r0
 800481e:	4637      	mov	r7, r6
 8004820:	dc04      	bgt.n	800482c <__swbuf_r+0x3a>
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	f000 fd45 	bl	80052b4 <_fflush_r>
 800482a:	b9e0      	cbnz	r0, 8004866 <__swbuf_r+0x74>
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	3b01      	subs	r3, #1
 8004830:	60a3      	str	r3, [r4, #8]
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	6022      	str	r2, [r4, #0]
 8004838:	701e      	strb	r6, [r3, #0]
 800483a:	6962      	ldr	r2, [r4, #20]
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	429a      	cmp	r2, r3
 8004840:	d004      	beq.n	800484c <__swbuf_r+0x5a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	07db      	lsls	r3, r3, #31
 8004846:	d506      	bpl.n	8004856 <__swbuf_r+0x64>
 8004848:	2e0a      	cmp	r6, #10
 800484a:	d104      	bne.n	8004856 <__swbuf_r+0x64>
 800484c:	4621      	mov	r1, r4
 800484e:	4628      	mov	r0, r5
 8004850:	f000 fd30 	bl	80052b4 <_fflush_r>
 8004854:	b938      	cbnz	r0, 8004866 <__swbuf_r+0x74>
 8004856:	4638      	mov	r0, r7
 8004858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800485a:	4621      	mov	r1, r4
 800485c:	4628      	mov	r0, r5
 800485e:	f000 f805 	bl	800486c <__swsetup_r>
 8004862:	2800      	cmp	r0, #0
 8004864:	d0d5      	beq.n	8004812 <__swbuf_r+0x20>
 8004866:	f04f 37ff 	mov.w	r7, #4294967295
 800486a:	e7f4      	b.n	8004856 <__swbuf_r+0x64>

0800486c <__swsetup_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <__swsetup_r+0xac>)
 8004870:	4605      	mov	r5, r0
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	460c      	mov	r4, r1
 8004876:	b118      	cbz	r0, 8004880 <__swsetup_r+0x14>
 8004878:	6a03      	ldr	r3, [r0, #32]
 800487a:	b90b      	cbnz	r3, 8004880 <__swsetup_r+0x14>
 800487c:	f7ff fed2 	bl	8004624 <__sinit>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004886:	0718      	lsls	r0, r3, #28
 8004888:	d422      	bmi.n	80048d0 <__swsetup_r+0x64>
 800488a:	06d9      	lsls	r1, r3, #27
 800488c:	d407      	bmi.n	800489e <__swsetup_r+0x32>
 800488e:	2309      	movs	r3, #9
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e034      	b.n	8004908 <__swsetup_r+0x9c>
 800489e:	0758      	lsls	r0, r3, #29
 80048a0:	d512      	bpl.n	80048c8 <__swsetup_r+0x5c>
 80048a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a4:	b141      	cbz	r1, 80048b8 <__swsetup_r+0x4c>
 80048a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d002      	beq.n	80048b4 <__swsetup_r+0x48>
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 f8ae 	bl	8004a10 <_free_r>
 80048b4:	2300      	movs	r3, #0
 80048b6:	6363      	str	r3, [r4, #52]	; 0x34
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	2300      	movs	r3, #0
 80048c2:	6063      	str	r3, [r4, #4]
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	b94b      	cbnz	r3, 80048e8 <__swsetup_r+0x7c>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048de:	d003      	beq.n	80048e8 <__swsetup_r+0x7c>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fd34 	bl	8005350 <__smakebuf_r>
 80048e8:	89a0      	ldrh	r0, [r4, #12]
 80048ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048ee:	f010 0301 	ands.w	r3, r0, #1
 80048f2:	d00a      	beq.n	800490a <__swsetup_r+0x9e>
 80048f4:	2300      	movs	r3, #0
 80048f6:	60a3      	str	r3, [r4, #8]
 80048f8:	6963      	ldr	r3, [r4, #20]
 80048fa:	425b      	negs	r3, r3
 80048fc:	61a3      	str	r3, [r4, #24]
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	b943      	cbnz	r3, 8004914 <__swsetup_r+0xa8>
 8004902:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004906:	d1c4      	bne.n	8004892 <__swsetup_r+0x26>
 8004908:	bd38      	pop	{r3, r4, r5, pc}
 800490a:	0781      	lsls	r1, r0, #30
 800490c:	bf58      	it	pl
 800490e:	6963      	ldrpl	r3, [r4, #20]
 8004910:	60a3      	str	r3, [r4, #8]
 8004912:	e7f4      	b.n	80048fe <__swsetup_r+0x92>
 8004914:	2000      	movs	r0, #0
 8004916:	e7f7      	b.n	8004908 <__swsetup_r+0x9c>
 8004918:	20000064 	.word	0x20000064

0800491c <memset>:
 800491c:	4402      	add	r2, r0
 800491e:	4603      	mov	r3, r0
 8004920:	4293      	cmp	r3, r2
 8004922:	d100      	bne.n	8004926 <memset+0xa>
 8004924:	4770      	bx	lr
 8004926:	f803 1b01 	strb.w	r1, [r3], #1
 800492a:	e7f9      	b.n	8004920 <memset+0x4>

0800492c <_close_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d06      	ldr	r5, [pc, #24]	; (8004948 <_close_r+0x1c>)
 8004930:	2300      	movs	r3, #0
 8004932:	4604      	mov	r4, r0
 8004934:	4608      	mov	r0, r1
 8004936:	602b      	str	r3, [r5, #0]
 8004938:	f7fc fc51 	bl	80011de <_close>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_close_r+0x1a>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_close_r+0x1a>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	2000034c 	.word	0x2000034c

0800494c <_lseek_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	; (800496c <_lseek_r+0x20>)
 8004950:	4604      	mov	r4, r0
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	2200      	movs	r2, #0
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f7fc fc66 	bl	800122c <_lseek>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_lseek_r+0x1e>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_lseek_r+0x1e>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	2000034c 	.word	0x2000034c

08004970 <_read_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d07      	ldr	r5, [pc, #28]	; (8004990 <_read_r+0x20>)
 8004974:	4604      	mov	r4, r0
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	2200      	movs	r2, #0
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fc fbf4 	bl	800116c <_read>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_read_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_read_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	2000034c 	.word	0x2000034c

08004994 <_write_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d07      	ldr	r5, [pc, #28]	; (80049b4 <_write_r+0x20>)
 8004998:	4604      	mov	r4, r0
 800499a:	4608      	mov	r0, r1
 800499c:	4611      	mov	r1, r2
 800499e:	2200      	movs	r2, #0
 80049a0:	602a      	str	r2, [r5, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7fc fbff 	bl	80011a6 <_write>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_write_r+0x1e>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_write_r+0x1e>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	2000034c 	.word	0x2000034c

080049b8 <__errno>:
 80049b8:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <__errno+0x8>)
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000064 	.word	0x20000064

080049c4 <__libc_init_array>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4d0d      	ldr	r5, [pc, #52]	; (80049fc <__libc_init_array+0x38>)
 80049c8:	4c0d      	ldr	r4, [pc, #52]	; (8004a00 <__libc_init_array+0x3c>)
 80049ca:	1b64      	subs	r4, r4, r5
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	2600      	movs	r6, #0
 80049d0:	42a6      	cmp	r6, r4
 80049d2:	d109      	bne.n	80049e8 <__libc_init_array+0x24>
 80049d4:	4d0b      	ldr	r5, [pc, #44]	; (8004a04 <__libc_init_array+0x40>)
 80049d6:	4c0c      	ldr	r4, [pc, #48]	; (8004a08 <__libc_init_array+0x44>)
 80049d8:	f000 fd28 	bl	800542c <_init>
 80049dc:	1b64      	subs	r4, r4, r5
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	2600      	movs	r6, #0
 80049e2:	42a6      	cmp	r6, r4
 80049e4:	d105      	bne.n	80049f2 <__libc_init_array+0x2e>
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ec:	4798      	blx	r3
 80049ee:	3601      	adds	r6, #1
 80049f0:	e7ee      	b.n	80049d0 <__libc_init_array+0xc>
 80049f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f6:	4798      	blx	r3
 80049f8:	3601      	adds	r6, #1
 80049fa:	e7f2      	b.n	80049e2 <__libc_init_array+0x1e>
 80049fc:	08005530 	.word	0x08005530
 8004a00:	08005530 	.word	0x08005530
 8004a04:	08005530 	.word	0x08005530
 8004a08:	08005534 	.word	0x08005534

08004a0c <__retarget_lock_acquire_recursive>:
 8004a0c:	4770      	bx	lr

08004a0e <__retarget_lock_release_recursive>:
 8004a0e:	4770      	bx	lr

08004a10 <_free_r>:
 8004a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d044      	beq.n	8004aa0 <_free_r+0x90>
 8004a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1a:	9001      	str	r0, [sp, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a22:	bfb8      	it	lt
 8004a24:	18e4      	addlt	r4, r4, r3
 8004a26:	f000 f8df 	bl	8004be8 <__malloc_lock>
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <_free_r+0x94>)
 8004a2c:	9801      	ldr	r0, [sp, #4]
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	b933      	cbnz	r3, 8004a40 <_free_r+0x30>
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	b003      	add	sp, #12
 8004a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a3c:	f000 b8da 	b.w	8004bf4 <__malloc_unlock>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d908      	bls.n	8004a56 <_free_r+0x46>
 8004a44:	6825      	ldr	r5, [r4, #0]
 8004a46:	1961      	adds	r1, r4, r5
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	bf01      	itttt	eq
 8004a4c:	6819      	ldreq	r1, [r3, #0]
 8004a4e:	685b      	ldreq	r3, [r3, #4]
 8004a50:	1949      	addeq	r1, r1, r5
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	e7ed      	b.n	8004a32 <_free_r+0x22>
 8004a56:	461a      	mov	r2, r3
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b10b      	cbz	r3, 8004a60 <_free_r+0x50>
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d9fa      	bls.n	8004a56 <_free_r+0x46>
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	1855      	adds	r5, r2, r1
 8004a64:	42a5      	cmp	r5, r4
 8004a66:	d10b      	bne.n	8004a80 <_free_r+0x70>
 8004a68:	6824      	ldr	r4, [r4, #0]
 8004a6a:	4421      	add	r1, r4
 8004a6c:	1854      	adds	r4, r2, r1
 8004a6e:	42a3      	cmp	r3, r4
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	d1e0      	bne.n	8004a36 <_free_r+0x26>
 8004a74:	681c      	ldr	r4, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	440c      	add	r4, r1
 8004a7c:	6014      	str	r4, [r2, #0]
 8004a7e:	e7da      	b.n	8004a36 <_free_r+0x26>
 8004a80:	d902      	bls.n	8004a88 <_free_r+0x78>
 8004a82:	230c      	movs	r3, #12
 8004a84:	6003      	str	r3, [r0, #0]
 8004a86:	e7d6      	b.n	8004a36 <_free_r+0x26>
 8004a88:	6825      	ldr	r5, [r4, #0]
 8004a8a:	1961      	adds	r1, r4, r5
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf04      	itt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	bf04      	itt	eq
 8004a98:	1949      	addeq	r1, r1, r5
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6054      	str	r4, [r2, #4]
 8004a9e:	e7ca      	b.n	8004a36 <_free_r+0x26>
 8004aa0:	b003      	add	sp, #12
 8004aa2:	bd30      	pop	{r4, r5, pc}
 8004aa4:	20000354 	.word	0x20000354

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0e      	ldr	r6, [pc, #56]	; (8004ae4 <sbrk_aligned+0x3c>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 fcaa 	bl	800540c <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fca5 	bl	800540c <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d00a      	beq.n	8004adc <sbrk_aligned+0x34>
 8004ac6:	1cc4      	adds	r4, r0, #3
 8004ac8:	f024 0403 	bic.w	r4, r4, #3
 8004acc:	42a0      	cmp	r0, r4
 8004ace:	d007      	beq.n	8004ae0 <sbrk_aligned+0x38>
 8004ad0:	1a21      	subs	r1, r4, r0
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 fc9a 	bl	800540c <_sbrk_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d101      	bne.n	8004ae0 <sbrk_aligned+0x38>
 8004adc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	20000358 	.word	0x20000358

08004ae8 <_malloc_r>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	1ccd      	adds	r5, r1, #3
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	4607      	mov	r7, r0
 8004afe:	db01      	blt.n	8004b04 <_malloc_r+0x1c>
 8004b00:	42a9      	cmp	r1, r5
 8004b02:	d905      	bls.n	8004b10 <_malloc_r+0x28>
 8004b04:	230c      	movs	r3, #12
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	2600      	movs	r6, #0
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004be4 <_malloc_r+0xfc>
 8004b14:	f000 f868 	bl	8004be8 <__malloc_lock>
 8004b18:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1c:	461c      	mov	r4, r3
 8004b1e:	bb5c      	cbnz	r4, 8004b78 <_malloc_r+0x90>
 8004b20:	4629      	mov	r1, r5
 8004b22:	4638      	mov	r0, r7
 8004b24:	f7ff ffc0 	bl	8004aa8 <sbrk_aligned>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	d155      	bne.n	8004bda <_malloc_r+0xf2>
 8004b2e:	f8d8 4000 	ldr.w	r4, [r8]
 8004b32:	4626      	mov	r6, r4
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	d145      	bne.n	8004bc4 <_malloc_r+0xdc>
 8004b38:	2c00      	cmp	r4, #0
 8004b3a:	d048      	beq.n	8004bce <_malloc_r+0xe6>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4638      	mov	r0, r7
 8004b42:	eb04 0903 	add.w	r9, r4, r3
 8004b46:	f000 fc61 	bl	800540c <_sbrk_r>
 8004b4a:	4581      	cmp	r9, r0
 8004b4c:	d13f      	bne.n	8004bce <_malloc_r+0xe6>
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	1a6d      	subs	r5, r5, r1
 8004b52:	4629      	mov	r1, r5
 8004b54:	4638      	mov	r0, r7
 8004b56:	f7ff ffa7 	bl	8004aa8 <sbrk_aligned>
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d037      	beq.n	8004bce <_malloc_r+0xe6>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	442b      	add	r3, r5
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	f8d8 3000 	ldr.w	r3, [r8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d038      	beq.n	8004bde <_malloc_r+0xf6>
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	42a2      	cmp	r2, r4
 8004b70:	d12b      	bne.n	8004bca <_malloc_r+0xe2>
 8004b72:	2200      	movs	r2, #0
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e00f      	b.n	8004b98 <_malloc_r+0xb0>
 8004b78:	6822      	ldr	r2, [r4, #0]
 8004b7a:	1b52      	subs	r2, r2, r5
 8004b7c:	d41f      	bmi.n	8004bbe <_malloc_r+0xd6>
 8004b7e:	2a0b      	cmp	r2, #11
 8004b80:	d917      	bls.n	8004bb2 <_malloc_r+0xca>
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	6025      	str	r5, [r4, #0]
 8004b88:	bf18      	it	ne
 8004b8a:	6059      	strne	r1, [r3, #4]
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	bf08      	it	eq
 8004b90:	f8c8 1000 	streq.w	r1, [r8]
 8004b94:	5162      	str	r2, [r4, r5]
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f104 060b 	add.w	r6, r4, #11
 8004b9e:	f000 f829 	bl	8004bf4 <__malloc_unlock>
 8004ba2:	f026 0607 	bic.w	r6, r6, #7
 8004ba6:	1d23      	adds	r3, r4, #4
 8004ba8:	1af2      	subs	r2, r6, r3
 8004baa:	d0ae      	beq.n	8004b0a <_malloc_r+0x22>
 8004bac:	1b9b      	subs	r3, r3, r6
 8004bae:	50a3      	str	r3, [r4, r2]
 8004bb0:	e7ab      	b.n	8004b0a <_malloc_r+0x22>
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	6862      	ldr	r2, [r4, #4]
 8004bb6:	d1dd      	bne.n	8004b74 <_malloc_r+0x8c>
 8004bb8:	f8c8 2000 	str.w	r2, [r8]
 8004bbc:	e7ec      	b.n	8004b98 <_malloc_r+0xb0>
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	6864      	ldr	r4, [r4, #4]
 8004bc2:	e7ac      	b.n	8004b1e <_malloc_r+0x36>
 8004bc4:	4634      	mov	r4, r6
 8004bc6:	6876      	ldr	r6, [r6, #4]
 8004bc8:	e7b4      	b.n	8004b34 <_malloc_r+0x4c>
 8004bca:	4613      	mov	r3, r2
 8004bcc:	e7cc      	b.n	8004b68 <_malloc_r+0x80>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f000 f80e 	bl	8004bf4 <__malloc_unlock>
 8004bd8:	e797      	b.n	8004b0a <_malloc_r+0x22>
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	e7dc      	b.n	8004b98 <_malloc_r+0xb0>
 8004bde:	605b      	str	r3, [r3, #4]
 8004be0:	deff      	udf	#255	; 0xff
 8004be2:	bf00      	nop
 8004be4:	20000354 	.word	0x20000354

08004be8 <__malloc_lock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <__malloc_lock+0x8>)
 8004bea:	f7ff bf0f 	b.w	8004a0c <__retarget_lock_acquire_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000350 	.word	0x20000350

08004bf4 <__malloc_unlock>:
 8004bf4:	4801      	ldr	r0, [pc, #4]	; (8004bfc <__malloc_unlock+0x8>)
 8004bf6:	f7ff bf0a 	b.w	8004a0e <__retarget_lock_release_recursive>
 8004bfa:	bf00      	nop
 8004bfc:	20000350 	.word	0x20000350

08004c00 <__sfputc_r>:
 8004c00:	6893      	ldr	r3, [r2, #8]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	b410      	push	{r4}
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	da08      	bge.n	8004c1e <__sfputc_r+0x1e>
 8004c0c:	6994      	ldr	r4, [r2, #24]
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	db01      	blt.n	8004c16 <__sfputc_r+0x16>
 8004c12:	290a      	cmp	r1, #10
 8004c14:	d103      	bne.n	8004c1e <__sfputc_r+0x1e>
 8004c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c1a:	f7ff bdea 	b.w	80047f2 <__swbuf_r>
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	1c58      	adds	r0, r3, #1
 8004c22:	6010      	str	r0, [r2, #0]
 8004c24:	7019      	strb	r1, [r3, #0]
 8004c26:	4608      	mov	r0, r1
 8004c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <__sfputs_r>:
 8004c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	18d5      	adds	r5, r2, r3
 8004c38:	42ac      	cmp	r4, r5
 8004c3a:	d101      	bne.n	8004c40 <__sfputs_r+0x12>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e007      	b.n	8004c50 <__sfputs_r+0x22>
 8004c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c44:	463a      	mov	r2, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7ff ffda 	bl	8004c00 <__sfputc_r>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d1f3      	bne.n	8004c38 <__sfputs_r+0xa>
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c54 <_vfiprintf_r>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	460d      	mov	r5, r1
 8004c5a:	b09d      	sub	sp, #116	; 0x74
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	4698      	mov	r8, r3
 8004c60:	4606      	mov	r6, r0
 8004c62:	b118      	cbz	r0, 8004c6c <_vfiprintf_r+0x18>
 8004c64:	6a03      	ldr	r3, [r0, #32]
 8004c66:	b90b      	cbnz	r3, 8004c6c <_vfiprintf_r+0x18>
 8004c68:	f7ff fcdc 	bl	8004624 <__sinit>
 8004c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c6e:	07d9      	lsls	r1, r3, #31
 8004c70:	d405      	bmi.n	8004c7e <_vfiprintf_r+0x2a>
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	059a      	lsls	r2, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_vfiprintf_r+0x2a>
 8004c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c7a:	f7ff fec7 	bl	8004a0c <__retarget_lock_acquire_recursive>
 8004c7e:	89ab      	ldrh	r3, [r5, #12]
 8004c80:	071b      	lsls	r3, r3, #28
 8004c82:	d501      	bpl.n	8004c88 <_vfiprintf_r+0x34>
 8004c84:	692b      	ldr	r3, [r5, #16]
 8004c86:	b99b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x5c>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff fdee 	bl	800486c <__swsetup_r>
 8004c90:	b170      	cbz	r0, 8004cb0 <_vfiprintf_r+0x5c>
 8004c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c94:	07dc      	lsls	r4, r3, #31
 8004c96:	d504      	bpl.n	8004ca2 <_vfiprintf_r+0x4e>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	b01d      	add	sp, #116	; 0x74
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	89ab      	ldrh	r3, [r5, #12]
 8004ca4:	0598      	lsls	r0, r3, #22
 8004ca6:	d4f7      	bmi.n	8004c98 <_vfiprintf_r+0x44>
 8004ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004caa:	f7ff feb0 	bl	8004a0e <__retarget_lock_release_recursive>
 8004cae:	e7f3      	b.n	8004c98 <_vfiprintf_r+0x44>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbe:	2330      	movs	r3, #48	; 0x30
 8004cc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004e74 <_vfiprintf_r+0x220>
 8004cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc8:	f04f 0901 	mov.w	r9, #1
 8004ccc:	4623      	mov	r3, r4
 8004cce:	469a      	mov	sl, r3
 8004cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd4:	b10a      	cbz	r2, 8004cda <_vfiprintf_r+0x86>
 8004cd6:	2a25      	cmp	r2, #37	; 0x25
 8004cd8:	d1f9      	bne.n	8004cce <_vfiprintf_r+0x7a>
 8004cda:	ebba 0b04 	subs.w	fp, sl, r4
 8004cde:	d00b      	beq.n	8004cf8 <_vfiprintf_r+0xa4>
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff ffa1 	bl	8004c2e <__sfputs_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	f000 80a9 	beq.w	8004e44 <_vfiprintf_r+0x1f0>
 8004cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf4:	445a      	add	r2, fp
 8004cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80a1 	beq.w	8004e44 <_vfiprintf_r+0x1f0>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0c:	f10a 0a01 	add.w	sl, sl, #1
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	9307      	str	r3, [sp, #28]
 8004d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d18:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1a:	4654      	mov	r4, sl
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d22:	4854      	ldr	r0, [pc, #336]	; (8004e74 <_vfiprintf_r+0x220>)
 8004d24:	f7fb fa54 	bl	80001d0 <memchr>
 8004d28:	9a04      	ldr	r2, [sp, #16]
 8004d2a:	b9d8      	cbnz	r0, 8004d64 <_vfiprintf_r+0x110>
 8004d2c:	06d1      	lsls	r1, r2, #27
 8004d2e:	bf44      	itt	mi
 8004d30:	2320      	movmi	r3, #32
 8004d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d36:	0713      	lsls	r3, r2, #28
 8004d38:	bf44      	itt	mi
 8004d3a:	232b      	movmi	r3, #43	; 0x2b
 8004d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d40:	f89a 3000 	ldrb.w	r3, [sl]
 8004d44:	2b2a      	cmp	r3, #42	; 0x2a
 8004d46:	d015      	beq.n	8004d74 <_vfiprintf_r+0x120>
 8004d48:	9a07      	ldr	r2, [sp, #28]
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f04f 0c0a 	mov.w	ip, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d58:	3b30      	subs	r3, #48	; 0x30
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d94d      	bls.n	8004dfa <_vfiprintf_r+0x1a6>
 8004d5e:	b1b0      	cbz	r0, 8004d8e <_vfiprintf_r+0x13a>
 8004d60:	9207      	str	r2, [sp, #28]
 8004d62:	e014      	b.n	8004d8e <_vfiprintf_r+0x13a>
 8004d64:	eba0 0308 	sub.w	r3, r0, r8
 8004d68:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	46a2      	mov	sl, r4
 8004d72:	e7d2      	b.n	8004d1a <_vfiprintf_r+0xc6>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	1d19      	adds	r1, r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	9103      	str	r1, [sp, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bfbb      	ittet	lt
 8004d80:	425b      	neglt	r3, r3
 8004d82:	f042 0202 	orrlt.w	r2, r2, #2
 8004d86:	9307      	strge	r3, [sp, #28]
 8004d88:	9307      	strlt	r3, [sp, #28]
 8004d8a:	bfb8      	it	lt
 8004d8c:	9204      	strlt	r2, [sp, #16]
 8004d8e:	7823      	ldrb	r3, [r4, #0]
 8004d90:	2b2e      	cmp	r3, #46	; 0x2e
 8004d92:	d10c      	bne.n	8004dae <_vfiprintf_r+0x15a>
 8004d94:	7863      	ldrb	r3, [r4, #1]
 8004d96:	2b2a      	cmp	r3, #42	; 0x2a
 8004d98:	d134      	bne.n	8004e04 <_vfiprintf_r+0x1b0>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9203      	str	r2, [sp, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfb8      	it	lt
 8004da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004daa:	3402      	adds	r4, #2
 8004dac:	9305      	str	r3, [sp, #20]
 8004dae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004e84 <_vfiprintf_r+0x230>
 8004db2:	7821      	ldrb	r1, [r4, #0]
 8004db4:	2203      	movs	r2, #3
 8004db6:	4650      	mov	r0, sl
 8004db8:	f7fb fa0a 	bl	80001d0 <memchr>
 8004dbc:	b138      	cbz	r0, 8004dce <_vfiprintf_r+0x17a>
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	eba0 000a 	sub.w	r0, r0, sl
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	4082      	lsls	r2, r0
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	3401      	adds	r4, #1
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd2:	4829      	ldr	r0, [pc, #164]	; (8004e78 <_vfiprintf_r+0x224>)
 8004dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd8:	2206      	movs	r2, #6
 8004dda:	f7fb f9f9 	bl	80001d0 <memchr>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d03f      	beq.n	8004e62 <_vfiprintf_r+0x20e>
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <_vfiprintf_r+0x228>)
 8004de4:	bb1b      	cbnz	r3, 8004e2e <_vfiprintf_r+0x1da>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	3307      	adds	r3, #7
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	3308      	adds	r3, #8
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df4:	443b      	add	r3, r7
 8004df6:	9309      	str	r3, [sp, #36]	; 0x24
 8004df8:	e768      	b.n	8004ccc <_vfiprintf_r+0x78>
 8004dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfe:	460c      	mov	r4, r1
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7a6      	b.n	8004d52 <_vfiprintf_r+0xfe>
 8004e04:	2300      	movs	r3, #0
 8004e06:	3401      	adds	r4, #1
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	4620      	mov	r0, r4
 8004e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e16:	3a30      	subs	r2, #48	; 0x30
 8004e18:	2a09      	cmp	r2, #9
 8004e1a:	d903      	bls.n	8004e24 <_vfiprintf_r+0x1d0>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0c6      	beq.n	8004dae <_vfiprintf_r+0x15a>
 8004e20:	9105      	str	r1, [sp, #20]
 8004e22:	e7c4      	b.n	8004dae <_vfiprintf_r+0x15a>
 8004e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e28:	4604      	mov	r4, r0
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e7f0      	b.n	8004e10 <_vfiprintf_r+0x1bc>
 8004e2e:	ab03      	add	r3, sp, #12
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	462a      	mov	r2, r5
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <_vfiprintf_r+0x22c>)
 8004e36:	a904      	add	r1, sp, #16
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f3af 8000 	nop.w
 8004e3e:	4607      	mov	r7, r0
 8004e40:	1c78      	adds	r0, r7, #1
 8004e42:	d1d6      	bne.n	8004df2 <_vfiprintf_r+0x19e>
 8004e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e46:	07d9      	lsls	r1, r3, #31
 8004e48:	d405      	bmi.n	8004e56 <_vfiprintf_r+0x202>
 8004e4a:	89ab      	ldrh	r3, [r5, #12]
 8004e4c:	059a      	lsls	r2, r3, #22
 8004e4e:	d402      	bmi.n	8004e56 <_vfiprintf_r+0x202>
 8004e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e52:	f7ff fddc 	bl	8004a0e <__retarget_lock_release_recursive>
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	065b      	lsls	r3, r3, #25
 8004e5a:	f53f af1d 	bmi.w	8004c98 <_vfiprintf_r+0x44>
 8004e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e60:	e71c      	b.n	8004c9c <_vfiprintf_r+0x48>
 8004e62:	ab03      	add	r3, sp, #12
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	462a      	mov	r2, r5
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <_vfiprintf_r+0x22c>)
 8004e6a:	a904      	add	r1, sp, #16
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f000 f879 	bl	8004f64 <_printf_i>
 8004e72:	e7e4      	b.n	8004e3e <_vfiprintf_r+0x1ea>
 8004e74:	080054f4 	.word	0x080054f4
 8004e78:	080054fe 	.word	0x080054fe
 8004e7c:	00000000 	.word	0x00000000
 8004e80:	08004c2f 	.word	0x08004c2f
 8004e84:	080054fa 	.word	0x080054fa

08004e88 <_printf_common>:
 8004e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	688a      	ldr	r2, [r1, #8]
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfb8      	it	lt
 8004e9c:	4613      	movlt	r3, r2
 8004e9e:	6033      	str	r3, [r6, #0]
 8004ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	b10a      	cbz	r2, 8004eae <_printf_common+0x26>
 8004eaa:	3301      	adds	r3, #1
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	0699      	lsls	r1, r3, #26
 8004eb2:	bf42      	ittt	mi
 8004eb4:	6833      	ldrmi	r3, [r6, #0]
 8004eb6:	3302      	addmi	r3, #2
 8004eb8:	6033      	strmi	r3, [r6, #0]
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	f015 0506 	ands.w	r5, r5, #6
 8004ec0:	d106      	bne.n	8004ed0 <_printf_common+0x48>
 8004ec2:	f104 0a19 	add.w	sl, r4, #25
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	6832      	ldr	r2, [r6, #0]
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dc26      	bgt.n	8004f1e <_printf_common+0x96>
 8004ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed4:	1e13      	subs	r3, r2, #0
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	bf18      	it	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	0692      	lsls	r2, r2, #26
 8004ede:	d42b      	bmi.n	8004f38 <_printf_common+0xb0>
 8004ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d01e      	beq.n	8004f2c <_printf_common+0xa4>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	6922      	ldr	r2, [r4, #16]
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	bf02      	ittt	eq
 8004efa:	68e5      	ldreq	r5, [r4, #12]
 8004efc:	6833      	ldreq	r3, [r6, #0]
 8004efe:	1aed      	subeq	r5, r5, r3
 8004f00:	68a3      	ldr	r3, [r4, #8]
 8004f02:	bf0c      	ite	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	2500      	movne	r5, #0
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	bfc4      	itt	gt
 8004f0e:	1a9b      	subgt	r3, r3, r2
 8004f10:	18ed      	addgt	r5, r5, r3
 8004f12:	2600      	movs	r6, #0
 8004f14:	341a      	adds	r4, #26
 8004f16:	42b5      	cmp	r5, r6
 8004f18:	d11a      	bne.n	8004f50 <_printf_common+0xc8>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e008      	b.n	8004f30 <_printf_common+0xa8>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4652      	mov	r2, sl
 8004f22:	4649      	mov	r1, r9
 8004f24:	4638      	mov	r0, r7
 8004f26:	47c0      	blx	r8
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d103      	bne.n	8004f34 <_printf_common+0xac>
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f34:	3501      	adds	r5, #1
 8004f36:	e7c6      	b.n	8004ec6 <_printf_common+0x3e>
 8004f38:	18e1      	adds	r1, r4, r3
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	2030      	movs	r0, #48	; 0x30
 8004f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f42:	4422      	add	r2, r4
 8004f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	e7c7      	b.n	8004ee0 <_printf_common+0x58>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4622      	mov	r2, r4
 8004f54:	4649      	mov	r1, r9
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c0      	blx	r8
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d0e6      	beq.n	8004f2c <_printf_common+0xa4>
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7d9      	b.n	8004f16 <_printf_common+0x8e>
	...

08004f64 <_printf_i>:
 8004f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	7e0f      	ldrb	r7, [r1, #24]
 8004f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f6c:	2f78      	cmp	r7, #120	; 0x78
 8004f6e:	4691      	mov	r9, r2
 8004f70:	4680      	mov	r8, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	469a      	mov	sl, r3
 8004f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f7a:	d807      	bhi.n	8004f8c <_printf_i+0x28>
 8004f7c:	2f62      	cmp	r7, #98	; 0x62
 8004f7e:	d80a      	bhi.n	8004f96 <_printf_i+0x32>
 8004f80:	2f00      	cmp	r7, #0
 8004f82:	f000 80d4 	beq.w	800512e <_printf_i+0x1ca>
 8004f86:	2f58      	cmp	r7, #88	; 0x58
 8004f88:	f000 80c0 	beq.w	800510c <_printf_i+0x1a8>
 8004f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f94:	e03a      	b.n	800500c <_printf_i+0xa8>
 8004f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f9a:	2b15      	cmp	r3, #21
 8004f9c:	d8f6      	bhi.n	8004f8c <_printf_i+0x28>
 8004f9e:	a101      	add	r1, pc, #4	; (adr r1, 8004fa4 <_printf_i+0x40>)
 8004fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08005011 	.word	0x08005011
 8004fac:	08004f8d 	.word	0x08004f8d
 8004fb0:	08004f8d 	.word	0x08004f8d
 8004fb4:	08004f8d 	.word	0x08004f8d
 8004fb8:	08004f8d 	.word	0x08004f8d
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08004f8d 	.word	0x08004f8d
 8004fc4:	08004f8d 	.word	0x08004f8d
 8004fc8:	08004f8d 	.word	0x08004f8d
 8004fcc:	08004f8d 	.word	0x08004f8d
 8004fd0:	08005115 	.word	0x08005115
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	080050cf 	.word	0x080050cf
 8004fdc:	08004f8d 	.word	0x08004f8d
 8004fe0:	08004f8d 	.word	0x08004f8d
 8004fe4:	08005137 	.word	0x08005137
 8004fe8:	08004f8d 	.word	0x08004f8d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	08004f8d 	.word	0x08004f8d
 8004ff4:	08004f8d 	.word	0x08004f8d
 8004ff8:	080050d7 	.word	0x080050d7
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	602a      	str	r2, [r5, #0]
 8005004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800500c:	2301      	movs	r3, #1
 800500e:	e09f      	b.n	8005150 <_printf_i+0x1ec>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	0607      	lsls	r7, r0, #24
 8005016:	f103 0104 	add.w	r1, r3, #4
 800501a:	6029      	str	r1, [r5, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0xbe>
 800501e:	681e      	ldr	r6, [r3, #0]
 8005020:	e003      	b.n	800502a <_printf_i+0xc6>
 8005022:	0646      	lsls	r6, r0, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0xba>
 8005026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800502a:	2e00      	cmp	r6, #0
 800502c:	da03      	bge.n	8005036 <_printf_i+0xd2>
 800502e:	232d      	movs	r3, #45	; 0x2d
 8005030:	4276      	negs	r6, r6
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	485a      	ldr	r0, [pc, #360]	; (80051a0 <_printf_i+0x23c>)
 8005038:	230a      	movs	r3, #10
 800503a:	e012      	b.n	8005062 <_printf_i+0xfe>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	0605      	lsls	r5, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xe8>
 8005048:	681e      	ldr	r6, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xee>
 800504c:	0641      	lsls	r1, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe4>
 8005050:	881e      	ldrh	r6, [r3, #0]
 8005052:	4853      	ldr	r0, [pc, #332]	; (80051a0 <_printf_i+0x23c>)
 8005054:	2f6f      	cmp	r7, #111	; 0x6f
 8005056:	bf0c      	ite	eq
 8005058:	2308      	moveq	r3, #8
 800505a:	230a      	movne	r3, #10
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6865      	ldr	r5, [r4, #4]
 8005064:	60a5      	str	r5, [r4, #8]
 8005066:	2d00      	cmp	r5, #0
 8005068:	bfa2      	ittt	ge
 800506a:	6821      	ldrge	r1, [r4, #0]
 800506c:	f021 0104 	bicge.w	r1, r1, #4
 8005070:	6021      	strge	r1, [r4, #0]
 8005072:	b90e      	cbnz	r6, 8005078 <_printf_i+0x114>
 8005074:	2d00      	cmp	r5, #0
 8005076:	d04b      	beq.n	8005110 <_printf_i+0x1ac>
 8005078:	4615      	mov	r5, r2
 800507a:	fbb6 f1f3 	udiv	r1, r6, r3
 800507e:	fb03 6711 	mls	r7, r3, r1, r6
 8005082:	5dc7      	ldrb	r7, [r0, r7]
 8005084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005088:	4637      	mov	r7, r6
 800508a:	42bb      	cmp	r3, r7
 800508c:	460e      	mov	r6, r1
 800508e:	d9f4      	bls.n	800507a <_printf_i+0x116>
 8005090:	2b08      	cmp	r3, #8
 8005092:	d10b      	bne.n	80050ac <_printf_i+0x148>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07de      	lsls	r6, r3, #31
 8005098:	d508      	bpl.n	80050ac <_printf_i+0x148>
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	4299      	cmp	r1, r3
 80050a0:	bfde      	ittt	le
 80050a2:	2330      	movle	r3, #48	; 0x30
 80050a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ac:	1b52      	subs	r2, r2, r5
 80050ae:	6122      	str	r2, [r4, #16]
 80050b0:	f8cd a000 	str.w	sl, [sp]
 80050b4:	464b      	mov	r3, r9
 80050b6:	aa03      	add	r2, sp, #12
 80050b8:	4621      	mov	r1, r4
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fee4 	bl	8004e88 <_printf_common>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d14a      	bne.n	800515a <_printf_i+0x1f6>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b004      	add	sp, #16
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	f043 0320 	orr.w	r3, r3, #32
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	4833      	ldr	r0, [pc, #204]	; (80051a4 <_printf_i+0x240>)
 80050d8:	2778      	movs	r7, #120	; 0x78
 80050da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	6829      	ldr	r1, [r5, #0]
 80050e2:	061f      	lsls	r7, r3, #24
 80050e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050e8:	d402      	bmi.n	80050f0 <_printf_i+0x18c>
 80050ea:	065f      	lsls	r7, r3, #25
 80050ec:	bf48      	it	mi
 80050ee:	b2b6      	uxthmi	r6, r6
 80050f0:	07df      	lsls	r7, r3, #31
 80050f2:	bf48      	it	mi
 80050f4:	f043 0320 	orrmi.w	r3, r3, #32
 80050f8:	6029      	str	r1, [r5, #0]
 80050fa:	bf48      	it	mi
 80050fc:	6023      	strmi	r3, [r4, #0]
 80050fe:	b91e      	cbnz	r6, 8005108 <_printf_i+0x1a4>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	f023 0320 	bic.w	r3, r3, #32
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	2310      	movs	r3, #16
 800510a:	e7a7      	b.n	800505c <_printf_i+0xf8>
 800510c:	4824      	ldr	r0, [pc, #144]	; (80051a0 <_printf_i+0x23c>)
 800510e:	e7e4      	b.n	80050da <_printf_i+0x176>
 8005110:	4615      	mov	r5, r2
 8005112:	e7bd      	b.n	8005090 <_printf_i+0x12c>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	6826      	ldr	r6, [r4, #0]
 8005118:	6961      	ldr	r1, [r4, #20]
 800511a:	1d18      	adds	r0, r3, #4
 800511c:	6028      	str	r0, [r5, #0]
 800511e:	0635      	lsls	r5, r6, #24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	d501      	bpl.n	8005128 <_printf_i+0x1c4>
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0x1ca>
 8005128:	0670      	lsls	r0, r6, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0x1c0>
 800512c:	8019      	strh	r1, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	4615      	mov	r5, r2
 8005134:	e7bc      	b.n	80050b0 <_printf_i+0x14c>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	602a      	str	r2, [r5, #0]
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	6862      	ldr	r2, [r4, #4]
 8005140:	2100      	movs	r1, #0
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb f844 	bl	80001d0 <memchr>
 8005148:	b108      	cbz	r0, 800514e <_printf_i+0x1ea>
 800514a:	1b40      	subs	r0, r0, r5
 800514c:	6060      	str	r0, [r4, #4]
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	2300      	movs	r3, #0
 8005154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005158:	e7aa      	b.n	80050b0 <_printf_i+0x14c>
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	462a      	mov	r2, r5
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	47d0      	blx	sl
 8005164:	3001      	adds	r0, #1
 8005166:	d0ad      	beq.n	80050c4 <_printf_i+0x160>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	079b      	lsls	r3, r3, #30
 800516c:	d413      	bmi.n	8005196 <_printf_i+0x232>
 800516e:	68e0      	ldr	r0, [r4, #12]
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	4298      	cmp	r0, r3
 8005174:	bfb8      	it	lt
 8005176:	4618      	movlt	r0, r3
 8005178:	e7a6      	b.n	80050c8 <_printf_i+0x164>
 800517a:	2301      	movs	r3, #1
 800517c:	4632      	mov	r2, r6
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	47d0      	blx	sl
 8005184:	3001      	adds	r0, #1
 8005186:	d09d      	beq.n	80050c4 <_printf_i+0x160>
 8005188:	3501      	adds	r5, #1
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	9903      	ldr	r1, [sp, #12]
 800518e:	1a5b      	subs	r3, r3, r1
 8005190:	42ab      	cmp	r3, r5
 8005192:	dcf2      	bgt.n	800517a <_printf_i+0x216>
 8005194:	e7eb      	b.n	800516e <_printf_i+0x20a>
 8005196:	2500      	movs	r5, #0
 8005198:	f104 0619 	add.w	r6, r4, #25
 800519c:	e7f5      	b.n	800518a <_printf_i+0x226>
 800519e:	bf00      	nop
 80051a0:	08005505 	.word	0x08005505
 80051a4:	08005516 	.word	0x08005516

080051a8 <__sflush_r>:
 80051a8:	898a      	ldrh	r2, [r1, #12]
 80051aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ae:	4605      	mov	r5, r0
 80051b0:	0710      	lsls	r0, r2, #28
 80051b2:	460c      	mov	r4, r1
 80051b4:	d458      	bmi.n	8005268 <__sflush_r+0xc0>
 80051b6:	684b      	ldr	r3, [r1, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dc05      	bgt.n	80051c8 <__sflush_r+0x20>
 80051bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dc02      	bgt.n	80051c8 <__sflush_r+0x20>
 80051c2:	2000      	movs	r0, #0
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051ca:	2e00      	cmp	r6, #0
 80051cc:	d0f9      	beq.n	80051c2 <__sflush_r+0x1a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051d4:	682f      	ldr	r7, [r5, #0]
 80051d6:	6a21      	ldr	r1, [r4, #32]
 80051d8:	602b      	str	r3, [r5, #0]
 80051da:	d032      	beq.n	8005242 <__sflush_r+0x9a>
 80051dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	075a      	lsls	r2, r3, #29
 80051e2:	d505      	bpl.n	80051f0 <__sflush_r+0x48>
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	1ac0      	subs	r0, r0, r3
 80051e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ea:	b10b      	cbz	r3, 80051f0 <__sflush_r+0x48>
 80051ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ee:	1ac0      	subs	r0, r0, r3
 80051f0:	2300      	movs	r3, #0
 80051f2:	4602      	mov	r2, r0
 80051f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051f6:	6a21      	ldr	r1, [r4, #32]
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b0      	blx	r6
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	d106      	bne.n	8005210 <__sflush_r+0x68>
 8005202:	6829      	ldr	r1, [r5, #0]
 8005204:	291d      	cmp	r1, #29
 8005206:	d82b      	bhi.n	8005260 <__sflush_r+0xb8>
 8005208:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <__sflush_r+0x108>)
 800520a:	410a      	asrs	r2, r1
 800520c:	07d6      	lsls	r6, r2, #31
 800520e:	d427      	bmi.n	8005260 <__sflush_r+0xb8>
 8005210:	2200      	movs	r2, #0
 8005212:	6062      	str	r2, [r4, #4]
 8005214:	04d9      	lsls	r1, r3, #19
 8005216:	6922      	ldr	r2, [r4, #16]
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	d504      	bpl.n	8005226 <__sflush_r+0x7e>
 800521c:	1c42      	adds	r2, r0, #1
 800521e:	d101      	bne.n	8005224 <__sflush_r+0x7c>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b903      	cbnz	r3, 8005226 <__sflush_r+0x7e>
 8005224:	6560      	str	r0, [r4, #84]	; 0x54
 8005226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005228:	602f      	str	r7, [r5, #0]
 800522a:	2900      	cmp	r1, #0
 800522c:	d0c9      	beq.n	80051c2 <__sflush_r+0x1a>
 800522e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005232:	4299      	cmp	r1, r3
 8005234:	d002      	beq.n	800523c <__sflush_r+0x94>
 8005236:	4628      	mov	r0, r5
 8005238:	f7ff fbea 	bl	8004a10 <_free_r>
 800523c:	2000      	movs	r0, #0
 800523e:	6360      	str	r0, [r4, #52]	; 0x34
 8005240:	e7c0      	b.n	80051c4 <__sflush_r+0x1c>
 8005242:	2301      	movs	r3, #1
 8005244:	4628      	mov	r0, r5
 8005246:	47b0      	blx	r6
 8005248:	1c41      	adds	r1, r0, #1
 800524a:	d1c8      	bne.n	80051de <__sflush_r+0x36>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0c5      	beq.n	80051de <__sflush_r+0x36>
 8005252:	2b1d      	cmp	r3, #29
 8005254:	d001      	beq.n	800525a <__sflush_r+0xb2>
 8005256:	2b16      	cmp	r3, #22
 8005258:	d101      	bne.n	800525e <__sflush_r+0xb6>
 800525a:	602f      	str	r7, [r5, #0]
 800525c:	e7b1      	b.n	80051c2 <__sflush_r+0x1a>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	e7ad      	b.n	80051c4 <__sflush_r+0x1c>
 8005268:	690f      	ldr	r7, [r1, #16]
 800526a:	2f00      	cmp	r7, #0
 800526c:	d0a9      	beq.n	80051c2 <__sflush_r+0x1a>
 800526e:	0793      	lsls	r3, r2, #30
 8005270:	680e      	ldr	r6, [r1, #0]
 8005272:	bf08      	it	eq
 8005274:	694b      	ldreq	r3, [r1, #20]
 8005276:	600f      	str	r7, [r1, #0]
 8005278:	bf18      	it	ne
 800527a:	2300      	movne	r3, #0
 800527c:	eba6 0807 	sub.w	r8, r6, r7
 8005280:	608b      	str	r3, [r1, #8]
 8005282:	f1b8 0f00 	cmp.w	r8, #0
 8005286:	dd9c      	ble.n	80051c2 <__sflush_r+0x1a>
 8005288:	6a21      	ldr	r1, [r4, #32]
 800528a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800528c:	4643      	mov	r3, r8
 800528e:	463a      	mov	r2, r7
 8005290:	4628      	mov	r0, r5
 8005292:	47b0      	blx	r6
 8005294:	2800      	cmp	r0, #0
 8005296:	dc06      	bgt.n	80052a6 <__sflush_r+0xfe>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e78e      	b.n	80051c4 <__sflush_r+0x1c>
 80052a6:	4407      	add	r7, r0
 80052a8:	eba8 0800 	sub.w	r8, r8, r0
 80052ac:	e7e9      	b.n	8005282 <__sflush_r+0xda>
 80052ae:	bf00      	nop
 80052b0:	dfbffffe 	.word	0xdfbffffe

080052b4 <_fflush_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	690b      	ldr	r3, [r1, #16]
 80052b8:	4605      	mov	r5, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	b913      	cbnz	r3, 80052c4 <_fflush_r+0x10>
 80052be:	2500      	movs	r5, #0
 80052c0:	4628      	mov	r0, r5
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	b118      	cbz	r0, 80052ce <_fflush_r+0x1a>
 80052c6:	6a03      	ldr	r3, [r0, #32]
 80052c8:	b90b      	cbnz	r3, 80052ce <_fflush_r+0x1a>
 80052ca:	f7ff f9ab 	bl	8004624 <__sinit>
 80052ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f3      	beq.n	80052be <_fflush_r+0xa>
 80052d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052d8:	07d0      	lsls	r0, r2, #31
 80052da:	d404      	bmi.n	80052e6 <_fflush_r+0x32>
 80052dc:	0599      	lsls	r1, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_fflush_r+0x32>
 80052e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e2:	f7ff fb93 	bl	8004a0c <__retarget_lock_acquire_recursive>
 80052e6:	4628      	mov	r0, r5
 80052e8:	4621      	mov	r1, r4
 80052ea:	f7ff ff5d 	bl	80051a8 <__sflush_r>
 80052ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f0:	07da      	lsls	r2, r3, #31
 80052f2:	4605      	mov	r5, r0
 80052f4:	d4e4      	bmi.n	80052c0 <_fflush_r+0xc>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	059b      	lsls	r3, r3, #22
 80052fa:	d4e1      	bmi.n	80052c0 <_fflush_r+0xc>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f7ff fb86 	bl	8004a0e <__retarget_lock_release_recursive>
 8005302:	e7dd      	b.n	80052c0 <_fflush_r+0xc>

08005304 <__swhatbuf_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	2900      	cmp	r1, #0
 800530e:	b096      	sub	sp, #88	; 0x58
 8005310:	4615      	mov	r5, r2
 8005312:	461e      	mov	r6, r3
 8005314:	da0d      	bge.n	8005332 <__swhatbuf_r+0x2e>
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	bf0c      	ite	eq
 8005322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005326:	2340      	movne	r3, #64	; 0x40
 8005328:	2000      	movs	r0, #0
 800532a:	6031      	str	r1, [r6, #0]
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	b016      	add	sp, #88	; 0x58
 8005330:	bd70      	pop	{r4, r5, r6, pc}
 8005332:	466a      	mov	r2, sp
 8005334:	f000 f848 	bl	80053c8 <_fstat_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	dbec      	blt.n	8005316 <__swhatbuf_r+0x12>
 800533c:	9901      	ldr	r1, [sp, #4]
 800533e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005346:	4259      	negs	r1, r3
 8005348:	4159      	adcs	r1, r3
 800534a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534e:	e7eb      	b.n	8005328 <__swhatbuf_r+0x24>

08005350 <__smakebuf_r>:
 8005350:	898b      	ldrh	r3, [r1, #12]
 8005352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005354:	079d      	lsls	r5, r3, #30
 8005356:	4606      	mov	r6, r0
 8005358:	460c      	mov	r4, r1
 800535a:	d507      	bpl.n	800536c <__smakebuf_r+0x1c>
 800535c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	2301      	movs	r3, #1
 8005366:	6163      	str	r3, [r4, #20]
 8005368:	b002      	add	sp, #8
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	ab01      	add	r3, sp, #4
 800536e:	466a      	mov	r2, sp
 8005370:	f7ff ffc8 	bl	8005304 <__swhatbuf_r>
 8005374:	9900      	ldr	r1, [sp, #0]
 8005376:	4605      	mov	r5, r0
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff fbb5 	bl	8004ae8 <_malloc_r>
 800537e:	b948      	cbnz	r0, 8005394 <__smakebuf_r+0x44>
 8005380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005384:	059a      	lsls	r2, r3, #22
 8005386:	d4ef      	bmi.n	8005368 <__smakebuf_r+0x18>
 8005388:	f023 0303 	bic.w	r3, r3, #3
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	e7e3      	b.n	800535c <__smakebuf_r+0xc>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	6020      	str	r0, [r4, #0]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	6163      	str	r3, [r4, #20]
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	6120      	str	r0, [r4, #16]
 80053a6:	b15b      	cbz	r3, 80053c0 <__smakebuf_r+0x70>
 80053a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 f81d 	bl	80053ec <_isatty_r>
 80053b2:	b128      	cbz	r0, 80053c0 <__smakebuf_r+0x70>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	431d      	orrs	r5, r3
 80053c4:	81a5      	strh	r5, [r4, #12]
 80053c6:	e7cf      	b.n	8005368 <__smakebuf_r+0x18>

080053c8 <_fstat_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <_fstat_r+0x20>)
 80053cc:	2300      	movs	r3, #0
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	f7fb ff0e 	bl	80011f6 <_fstat>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d102      	bne.n	80053e4 <_fstat_r+0x1c>
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	b103      	cbz	r3, 80053e4 <_fstat_r+0x1c>
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop
 80053e8:	2000034c 	.word	0x2000034c

080053ec <_isatty_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d06      	ldr	r5, [pc, #24]	; (8005408 <_isatty_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fb ff0d 	bl	8001216 <_isatty>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_isatty_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_isatty_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	2000034c 	.word	0x2000034c

0800540c <_sbrk_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d06      	ldr	r5, [pc, #24]	; (8005428 <_sbrk_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4604      	mov	r4, r0
 8005414:	4608      	mov	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fb ff16 	bl	8001248 <_sbrk>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_sbrk_r+0x1a>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_sbrk_r+0x1a>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	2000034c 	.word	0x2000034c

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
